{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 Menlo-Regular;\f2\froman\fcharset0 Times-Bold;
\f3\fnil\fcharset0 Monaco;\f4\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;\f5\fswiss\fcharset0 Helvetica;
\f6\fnil\fcharset0 Menlo-Bold;\f7\fnil\fcharset0 Menlo-Italic;\f8\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red149\green149\blue149;\red255\green255\blue255;\red251\green0\blue7;
\red255\green255\blue255;\red0\green0\blue0;\red187\green187\blue187;\red36\green255\blue255;\red255\green255\blue255;
\red251\green0\blue255;\red75\green0\blue240;\red255\green255\blue255;\red255\green255\blue255;\red34\green255\blue6;
\red255\green255\blue255;\red255\green255\blue255;\red123\green221\blue55;\red255\green255\blue255;\red255\green255\blue255;
\red255\green255\blue255;\red255\green255\blue255;\red255\green255\blue255;\red34\green255\blue6;\red34\green255\blue6;
\red255\green255\blue11;\red255\green255\blue255;\red157\green0\blue222;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue0;\red38\green38\blue38;\red242\green242\blue242;\red189\green198\blue208;\red12\green14\blue18;
\red117\green117\blue117;\red34\green255\blue6;\red254\green255\blue10;\red251\green0\blue255;\red252\green255\blue10;
\red19\green19\blue19;\red34\green255\blue6;\red57\green192\blue38;\red255\green255\blue255;\red255\green255\blue255;
\red253\green139\blue9;\red229\green229\blue229;\red255\green255\blue255;\red255\green255\blue255;\red255\green255\blue255;
\red255\green255\blue255;\red255\green255\blue255;\red202\green202\blue202;\red255\green255\blue255;\red251\green0\blue7;
\red255\green255\blue255;\red255\green255\blue255;\red255\green255\blue255;\red70\green137\blue204;\red23\green23\blue23;
\red194\green126\blue101;\red167\green197\blue152;\red89\green138\blue67;\red35\green35\blue35;\red71\green138\blue206;
\red194\green125\blue100;\red203\green203\blue202;\red167\green197\blue151;\red203\green203\blue202;\red204\green204\blue202;
\red36\green255\blue255;\red70\green137\blue204;\red23\green23\blue23;\red202\green202\blue202;\red167\green197\blue152;
\red194\green126\blue101;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c65058\c65058\c65058;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c100000\c12195\c0;
\cssrgb\c100000\c100000\c99985\c0;\cssrgb\c0\c0\c0;\cssrgb\c78156\c78156\c78156;\cssrgb\c4983\c100000\c100000;\cssrgb\c100000\c100000\c99971\c0;
\cssrgb\c100000\c7248\c100000;\cssrgb\c37152\c9588\c95573;\cssrgb\c100000\c100000\c99956\c0;\cssrgb\c100000\c100000\c99926\c0;\cssrgb\c0\c100000\c0;
\cssrgb\c100000\c100000\c99941\c0;\cssrgb\c100000\c100000\c99910\c0;\cssrgb\c54133\c87606\c27652;\cssrgb\c100000\c100000\c99970\c0;\cssrgb\c100000\c100000\c99955\c0;
\cssrgb\c100000\c100000\c99940\c0;\cssrgb\c100000\c100000\c99895\c0;\cssrgb\c100000\c100000\c99925\c0;\cssrgb\c0\c98906\c0;\cssrgb\c0\c97824\c0;
\cssrgb\c100000\c100000\c0;\cssrgb\c100000\c100000\c99863\c0;\cssrgb\c68591\c7835\c89602;\cssrgb\c100000\c100000\c99894\c0;\cssrgb\c0\c1\c1;
\csgray\c0;\cssrgb\c20000\c20000\c20000;\cssrgb\c96078\c96078\c96078;\cssrgb\c78824\c81961\c85098;\cssrgb\c5098\c6667\c9020;
\cssrgb\c53231\c53231\c53231;\cssrgb\c0\c99725\c0;\cssrgb\c99555\c99475\c0;\cssrgb\c100000\c7604\c100000;\cssrgb\c99113\c98953\c0;
\cssrgb\c9821\c9821\c9821;\cssrgb\c0\c99452\c0;\cssrgb\c25706\c77963\c19557;\cssrgb\c100000\c100000\c100000;\csgray\c100000;
\cssrgb\c100000\c61456\c0;\cssrgb\c91857\c91857\c91857;\cssrgb\c100000\c100000\c99985;\cssrgb\c100000\c100000\c99911\c0;\cssrgb\c100000\c100000\c99880\c0;
\cssrgb\c100000\c100000\c99849\c0;\cssrgb\c100000\c100000\c99865\c0;\cssrgb\c83137\c83137\c83137;\cssrgb\c100000\c100000\c99896\c0;\cssrgb\c99893\c12008\c0;
\cssrgb\c100000\c100000\c99941;\cssrgb\c100000\c100000\c99971;\cssrgb\c100000\c100000\c99956;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;
\cssrgb\c80784\c56863\c47059;\cssrgb\c70980\c80784\c65882;\cssrgb\c41569\c60000\c33333;\cssrgb\c18452\c18452\c18429;\cssrgb\c34146\c61677\c84338;
\cssrgb\c80772\c56796\c46790;\cssrgb\c83320\c83320\c83112;\cssrgb\c71035\c80830\c65726;\cssrgb\c83411\c83411\c83099;\cssrgb\c83591\c83590\c83069;
\cssrgb\c5144\c100000\c100000;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;\cssrgb\c70980\c80784\c65882;
\cssrgb\c80784\c56863\c47059;\cssrgb\c0\c1\c1;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid301\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid6}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}}
\paperw11900\paperh16840\margl1440\margr1440\vieww16160\viewh10080\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Hello this is all the configuration that I made when compiling and running a code in C language using Mac terminal:\
\
I installed tone Xcode-select, then I  use this cmd line to update the Xcode. \
\
\cb2 \expnd0\expndtw0\kerning0
sudo rm -rf /Library/Developer/CommandLineTools\
\pard\pardeftab720\partightenfactor0
\cf0 xcode-select --install\
\cb3 \
After this all went good.\
\
\cf4 \cb5 Create a directory called exo00, then change its name to ex00:\cf0 \cb3 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb7 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macosy testparadis % mkdir exo00\
mac@macosy testparadis % mv exo00 ex00\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \cb5 Create to files: type file & txt, using echo cmd and she its contents using cat:\cf6 \cb3 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb7 mac@macosy ex00 % echo hi there! > file.txt\
mac@macosy ex00 % ls\
file.txt\
mac@macosy ex00 % cat fie \
cat: fie: No such file or directory\
mac@macosy ex00 % cat file.txt\
hi there!\
mac@macosy ex00 % echo SW > file\
mac@macosy ex00 % ls\
file		file.txt\
mac@macosy ex00 % cat file \
SW\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb3 \
the permission was denied to execute the files in the ex00 directory, so I gave it the permission when typing the cmd:\
Basically, the permission is always allowed to print the file\'92s contents when using cat command file, but when trying to access it using ./file, it\'92s been denied that\'92s why we need to make it executable using chmod +x to allow accessing to the file.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb7 mac@macwind ex00 % chmod +x file\
mac@macwind ex00 % ./file\
./file: line 1: SW: command not found\
mac@macwind ex00 % cat file\
SW\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\qc\partightenfactor0
\cf8 \cb5 Text Vim:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb9 In vim there are 3 modes of operation: \cb10 Normal, Insert, and Visual\cb3 \
\cb9 \
To edit an existing file, or to create a new one that it doesn\'92t exit before, we type: \
vi file.txt\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb11 We type :\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb9 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf10 \cb12 i\cf6 \cb9  to go to insert mode before the cursor, and then escape to get out it.\
\cf10 \cb12 I \cf6 \cb9 to to the beginning of the line\
\cf10 \cb12 o \cf6 \cb9 to insert in the next line of the cursor.\
\cf10 \cb12 a \cf6 \cb9 to insert in the following character of the cursor. \
\cf10 \cb12 A\cf6 \cb9  to the end of the line\
\cf10 \cb13 e \cf6 \cb9 to the end of the word\
\cf10 \cb12 0\cf6 \cb9  jump to the beg of the line without the insert mode\
\cf10 \cb12 $\cf6 \cb9  jump to the end of line without entering the insert mode\
\
\cf14 \cb15 :q\cb12 ! :\cf6 \cb15 quit and dismiss any changemant and quit,  because if typing just :q will not able to exit until save changes.\
\cf14 \cb12 :!ls :\cf6 \cb15 terminal command not vim. \
\cf14 \cb12 :set number :\cf6 \cb15 to activate numbers line\
\cf14 \cb13 :set relativenumber :\cf6 \cb16 to show relative lines according to a cursor.\cb15 \
\cf14 \cb5 :set mouse=a \cf6 \cb15 :set mouse to active, to be able to use it in the vim\
\
We can move to n lines from a cursor start using the n number plus left/right/up/down\
\cf14 \cb12  \
\cf6 \cb15 Hence, all the setting that we\'92ve used in a vim session are immediately removed after exiting the file, in order to save it, we need to use the \cf14 \cb13 vimrc \cf6 \cb15 configuration file, and type all the configs:\
\
\cb13 In the macOS, the .vimrc file is located at directory: \cf0 \cb2 \expnd0\expndtw0\kerning0
\CocoaLigature1 /usr/share/vim/.vimrc\cb3 \
\cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 So I execute:  \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb2 vi .vimrc\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb9 \
We added our setting to the vim file: \
set number\
set mouse=a\
colorscheme slate\
\
\
Fortunelty I found the error and the mistake, actually I needed to typ\cb3 e \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 ~ not \'98 to  point to the home path in terminal \
And it\'92s written using: option + 5.\
\
To cancel changes, we use after logging out from the INSERT mode:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb17 <- action\cb5  (check last change ctrl z) : \cb2 u key after\cb5 \
\cb17 -> action\cb5  (check other the change redo ). \cb2 Ctrl r\cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\
\
Concerning the Visual mode: \
\
The Visual mode permit to select the words items in the vim so we can copy/paste/cut/delete:\
To select using only keyboard: ->v <-v that means pressing v and moving the cursor key into the character.\
\
\cf8 \cb15 To delete\cf6 \cb9 : \cf14 \cb12 d key\cf6 \cb9 \
\cf8 \cb15 To yank\cf6 \cb9 (copy slang in vim):\cf14 \cb12  y key\cf6 \cb9 \
\cf8 \cb15 To yank the whole line\cf6 \cb9 : \cf14 \cb12 double y key\cf6 \cb9 \
\cf8 \cb15 To paste\cf6 \cb9 : \cf14 \cb12 p key\cf6 \cb9 \
\cf8 \cb15 To paste double time\cf6 \cb9 : \cf14 \cb12 double p\cf6 \cb9 \
\cf8 \cb15 To quit Visual mode\cf6 \cb9 : \cf14 \cb12 click esc twice.\cf6 \cb9 \
\cf8 \cb15 To delete the whole line without selecting it all\cf14 \cb12 :\cf6 \cb9  \cf14 \cb15 dd key.\cf6 \cb9 \
\cf8 \cb15 To delete characters until the beg starting at a random word:\cf6 \cb9  \cf14 \cb12 use d+0\cf6 \cb9 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\tx6976\pardirnatural\partightenfactor0
\cf8 \cb15 To delete until the end of the line:\cf6 \cb9  \cf14 \cb12 d+$ \cf6 \cb9 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb15 To delete until the end of the word: \cf14 \cb12 d+e\cf6 \cb9 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb5 To delete between the quotation marque \'93\'94: \cf14 \cb18 use c+i+\'94 \cf8 \cb5 \
To yank between the  \'93 \'93: \cf14 \cb18 y+i+\'94\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb19 To jump to the closing brackets :\cf14 \cb18  %\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb5 Delete every inside the brackets included: \cf14 \cb18 d%\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb19 Jumping to one position before specifying symbol like * or ( : \cf14 \cb18 t+the symbol for eg t* \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb5 Jumping to the position of the symbol, we use find: f+symbol\
Deleting until one position before the symbol: d+t+symbol\
Deleting until the symbol  included: d+f+symbol\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb19 Jumping  backwards to one position before specifying symbol like * or ( \'85 : \cf14 \cb18 T+the symbol for eg t* \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb5 Jumping \cb19 backwards\cb5  to the position of the symbol, we use find: \cf14 \cb18 F+symbol\cf8 \cb5 \
Deleting \cb19 backwards until\cb5  one position before the symbol:\cf14 \cb18  d+T+symbol\cf8 \cb5 \
Deleting \cb19 backwards \cb5 until the symbol  included: \cf14 \cb18 d+F+symbol\cf8 \cb5 \
We can combine all for eg:\
Copy text until symbol: \cf14 \cb18 y+t and then p\cf8 \cb5 \
Jump to the beg of a file: \cf14 \cb18 gg\cf8 \cb5 \
Jump to the end of a file: \cf14 \cb18 G\cf8 \cb5 \
Jump to a specific n file: \cf14 \cb19 n+G or type :n\
\
// \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb20 Indent a line >>\cf14 \cb19 : go to visual mode select using -> and then click on > to go forward or < to go backwards\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb10 // Visual line mode\cb20 : \cf14 \cb5  Press shift+v\
\cf6 \cb10 // Visual block mode\cb20 : \cf14 \cb5  Press ctrl +v\cf6 \cb20 \
\
To select many line up and down: we play with the up and down symbol\
\
To iterating blocks: we use the ctrl+v \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb21 To indent automatically and correctly our code lines:\cf14 \cb16  ==\cf10 \cb22 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb20 To indent all the file: \cf14 \cb19 gg=G\
\cf8 \cb20 REMEMBER: to jump to a n line:\cf14 \cb19  n+G\
\
\cf8 \cb20 To search a word until the end of the file: \cf14 \cb22 /+the word search item and jump over the next word using n, and N to the previous one.\cf8 \cb20 \
To search a word until the beg of the file: \cf14 \cb22 ?+word and then same use n and N to iterate. \cf8 \cb20 \
We can also look for the word using the \cf14 \cb22 # or *\cf8 \cb20  depends to the direction after selecting the word on visual mode.\
\
To have space when scrolling down we use zz\
\
\
To change a word1 to word2 in the whole file we type the cmd: \cf23 \cb3 :\cf24 %/word1/word2/g\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb5 To delete a line, and keep deleting after it:\cf24 \cb3  dd plus clicks on dot \'93.\'94 \
\cf8 \cb5 Repeating a command using a dot \'93.\'94 for eg delete until quotation:\cf24 \cb3  we put the cursor and then we do:  dt\'94 \cf8 \cb20 \
Deleting in vim means also cutting, we can delete and recover it using p.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb16 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\qc\partightenfactor0
\cf25 \cb26 ##\cb21 SHELL0\cf27 \cb16 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf14 \cb21 EXERCICE 1:
\f0 \cf25 \cb22 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \cb28 ##Understand the ls -l \
\cf29 \cb3 \
The bytes section, \expnd0\expndtw0\kerning0
\CocoaLigature1 The size in bytes, may be modiedy this by using the :-h option together with -l this will have the output in k,M,G for a better understanding.\
\
PB SOLVED \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf30 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind ~ % cd desktop\
mac@macwind desktop % cd ex01\
mac@macwind ex01 % ls -l\
total 8\
-rw-r--r--  1 mac  staff  40 May 18 15:42 testShell00\
mac@macwind ex01 %  chmod a-w testShell00\
mac@macwind ex01 % ls -l\
total 8\
-r--r--r--  1 mac  staff  40 May 18 15:42 testShell00\
mac@macwind ex01 % chmod go +x testShell00\
chmod: Invalid file mode: go\
mac@macwind ex01 % chmod go+x testShell00\
mac@macwind ex01 % ls -l\
total 8\
-r--r-xr-x  1 mac  staff  40 May 18 15:42 testShell00\
mac@macwind ex01 % \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\b \cf29 \cb5 \ul \ulc29 To understand the chmod:
\f0\b0 \cb3 \ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf30 \cb1 Giving this eg: -rw-r--r--\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf29 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\sa300\partightenfactor0
\cf29 -\'a0for File,\'a0d\'a0for Directory,\'a0l\'a0for Link\
The second,third,fourth fields are permissions that means read, write and execute, and comes in three different fields that belongs to the permission the:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf29 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
second: The owner has over the file, 3 spaces eg: 
\f1 \cf30 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 rw-
\f0 \cf29 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
third: The group has over the file 3 spaces eg: r\'97\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
fourth: Everybody else has over the file 3 spaces eg: r\'97\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sa300\partightenfactor0
\cf29 This field specifies the number of links or directories inside this directory.\
The sixth field is the user\
The user that owns the file, or directory\
The seventh field is te group\
The group that file belongs to, and any user in that group will have the permissions given in the third field over that file.\
The eighth field\
The size in bytes, you may modify this by using the -h option together with -l this will have the output in k,M,G for a better understanding.\
The ninth field:\
The date of last modification\
The tenth field:\
The name of the file\
\pard\pardeftab720\sa300\partightenfactor0

\f2\b \cf29 And for the cmd:
\f0\b0 \
\cb5 To change the permission for all the classes: u(user), g(group), o(other),a(all: u,g, and o), we use the operators \'93+ add access\'94, \'93-remove access\'94,\'94set exact access\'94\cb3 \
\pard\pardeftab720\sa320\partightenfactor0
\cf29 For example, to add permission for everyone to read a file in the current directory named\'a0myfile, at the Unix prompt, enter:\
\pard\pardeftab720\partightenfactor0

\f3 \cf31 \cb32 chmod a+r myfile\
\pard\pardeftab720\sa300\partightenfactor0

\f0 \cf29 \cb3 \
\pard\pardeftab720\sa300\partightenfactor0

\f2\b \cf29 \cb5 \ul #understand the tar
\f0\b0 \cb3 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf30 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind ex01 % tar -cf testShell00.tar testShell00\
mac@macwind ex01 % ls\
testShell00	testShell00.tar\
\
\pard\pardeftab720\partightenfactor0

\f0 \AppleTypeServices\AppleTypeServicesF65539 \cf29 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 The Linux \'91tar\'92 stands for tape archive, is used to create Archive and extract the Archive files. tar command in Linux is one of the important command which provides archiving functionality in Linux. We can use Linux tar command to create compressed or uncompressed Archive files and also maintain and modify them.\'a0\AppleTypeServices \
\pard\pardeftab720\sa300\partightenfactor0
\cf29 \cb3 \
\pard\pardeftab720\partightenfactor0
\AppleTypeServices\AppleTypeServicesF65539 \cf6 \cb5 -c :\'a0Creates Archive\'a0\
-x :\'a0Extract the archive\'a0\
-f :\'a0creates archive with given filename\'a0\
-t :\'a0displays or lists files in archived file\'a0\
-u :\'a0archives and adds to an existing archive file\'a0\
-v :\'a0Displays Verbose Information\'a0\
-A :\'a0Concatenates the archive files\'a0\
-z :\'a0zip, tells tar command that creates tar file using gzip\'a0\
-j :\'a0filter archive tar file using tbzip\'a0\
-W :\'a0Verify a archive file\'a0\
-r :\'a0update or add file or directory in already existed .tar file\
\'a0\AppleTypeServices \
\pard\pardeftab720\sa300\partightenfactor0
\cf29 \cb3 To change the number of links in a simple file and not a directory, (\cf0 \cb1 Link count (what constitutes a "link" here varies))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf30 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind desktop % cd ex02\
mac@macwind ex02 % ls -l\
total 32\
drwx--xr-x  2 mac  staff  64 May 29 23:02 test0\
-rwxr-xr--  1 mac  staff   4 May 29 22:19 test1\
dr-x---r--  2 mac  staff  64 May 29 22:23 test2\
-r-----r--  2 mac  staff   1 May 29 23:33 test3\
-rw-r----x  1 mac  staff   2 May 29 23:34 test4\
-r-----r--  2 mac  staff   1 May 29 23:33 test5\
mac@macwind ex02 % ln test5 test6  \
mac@macwind ex02 % ls\
test0	test1	test2	test3	test4	test5	test6\
mac@macwind ex02 % ls -l\
total 40\
drwx--xr-x  2 mac  staff  64 May 29 23:02 test0\
-rwxr-xr--  1 mac  staff   4 May 29 22:19 test1\
dr-x---r--  2 mac  staff  64 May 29 22:23 test2\
-r-----r--  3 mac  staff   1 May 29 23:33 test3\
-rw-r----x  1 mac  staff   2 May 29 23:34 test4\
-r-----r--  3 mac  staff   1 May 29 23:33 test5\
-r-----r--  3 mac  staff   1 May 29 23:33 test6\
\
These code lines show how to create hard links between two files using the ln cmd\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 EXERCISE 2:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \
The cmd line: list all files and directories in the current directory, separated by a comma, by order of creation date, and the directories names are followed by slash charter\
Check: https://www.computerhope.com/unix/uls.htm\
\
\pard\pardeftab720\partightenfactor0

\f4 \cf33 \cb34 \expnd0\expndtw0\kerning0
\CocoaLigature1 ls -Ump
\f0 \cf29 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf29 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
-p : append \'93/\'93 indicator to directories\
-m: fill width with a comma separated list of entries\
-U: list entries  in directory order.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf14 \cb5 EXERCICES 3:
\f0 \cf29 \cb3 \
\
Create a shell script that return the last 3 ids of commit of our git.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf10 \cb5 ##git Notes:\cf29 \cb3 \
\
\
\
\
Using the cmd:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb5 Cat -e \cf29 \cb3 filename will make the the $ sign shown at the end of its lines:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf30 \cb1 mac@macwind shellexercices % cat -e testfile\
hi there$\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf29 \cb3 \
We use the script:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf25 \cb1 git log -3 --pretty=%H\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 Or\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 git log --format="%H" -n 3\cf30 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb2 mac@macwind shellexercices % git log --format="%H" -n 3\cf30 \cb1 \
92ac47b26a068f209f0ce422690cc5d7d2dc13fa\
8b698f1e6b0920822948627ca3371688f5f5122b\
e527bb56f3237ea812d38935d3b15bfa68e2fb84\
\cf6 \cb35 mac@macwind shellexercices % git log -3 --pretty=%H\cf30 \cb1 \
92ac47b26a068f209f0ce422690cc5d7d2dc13fa\
8b698f1e6b0920822948627ca3371688f5f5122b\
e527bb56f3237ea812d38935d3b15bfa68e2fb84\
\
\
\cf6 \cb2 mac@macwind shellexercices % bash git_commit.sh | cat -e \cf30 \cb1 \
92ac47b26a068f209f0ce422690cc5d7d2dc13fa$\
8b698f1e6b0920822948627ca3371688f5f5122b$\
e527bb56f3237ea812d38935d3b15bfa68e2fb84$\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf29 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \cb5 EXERCICE 4:
\f0 \cf29 \cb3 \
Create a shell script that return the list of the ignored existant files in my actual repo\
\
We use the script:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1 \cf25 \cb1 \CocoaLigature1 git ls-files --others --exclude-standard -i
\f5 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf29 \cb3 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf6 \cb2 mac@macwind shellexercices % git ls-files --exclude-standard -o -i\cf30 \cb1 \
git_ignore.sh
\f0 \cf29 \cb3 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf14 \cb5 EXERCICE 5:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb12 diff:\cf14 \cb5 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 The Linux\'a0diff\'a0command is used to compare two files line by line and display the difference between them. This command-line utility lists changes you need to apply to make the files identical.\cf14 \cb5 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf29 \cb3 \
https://teletype.in/@udarcs/PaREDM3oFqb\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf14 \cb5 EXERCICE 6:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf29 \cb3 \
In a file called clean place the cmd line that will search for all files in the current directory as well as in its sub-directories with a name ending by ~ or a name that start and end with #:\
\
\
The pb with using the pipe with find and grep is we cannot delete them at the end. But we try  to use them just to know grep functionality:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf25 \cb1 mac@macwind shellexercices % find . | grep -e  '.txt$' -e '.c$'\cf30 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf29 \cb3 Is the same as\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf25 \cb1 mac@macwind shellexercices % find . | grep '.txt$\\|.c$'\cf30 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 => \cb5 grep -e \expnd0\expndtw0\kerning0
\CocoaLigature1 \'a0allows to use several strings for searching which This works quite simi\cb9 lar to\'a0\\|\'a0stands for\'a0or\cb5  but for searching just one pattern the -e is often optional\
\cf6 \cb3 \
Now we move to use only find with filters:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 -o\cf8  \cf6 in find means \cf25 or\cf30 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 To filter the big and the end in a file\'92s name:\
We use * between the patterns for eg:\cf30 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 mac@macwind shellexercices % find . -type f -name "*.txt" -o -name "test*tar" \cf30 \
./ex00/file.txt\
./ex07/b.txt\
./ex01/testShell00.tar \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf10 This line of code should files in txt format and that files that start by test and finish by tar\cf30 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf29 \cb3 \
Remember in find:\
\pard\pardeftab720\partightenfactor0

\f1 \cf36 \expnd0\expndtw0\kerning0
\CocoaLigature1 \\(expr \\):\cf6  True if \'91expr\'92 is true; used for grouping criteria combined with OR or AND\
\

\f0 \cf29 \kerning1\expnd0\expndtw0 \CocoaLigature0 For the exerices we use:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf25 \cb1 find . -type f \\( -name "#*#" -o -name "*~" \\) -print -delete
\f0 \cf29 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \cb5 Check https://alvinalexander.com/unix/edu/examples/find.shtml \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf29 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf14 \cb5 EXERCICE 7:
\f0 \cf29 \cb3 \
Create a magic file called ft_magic that will be formatted appropriately to detect files of 42 file type, built with a 42 string at the 42nd byte.\
\
In case we have a magic file, to compile it, we use the command:\
\pard\pardeftab720\partightenfactor0

\f4 \cf25 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 file -C -m <your magic file>\
\cf6 \cb12 To run it:\
\cf25 \cb9 \
File -m <your magic file> \cf6 \cb12 to use it\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f1 \cf6 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
File has to be formatted appropriately to detect files of\'a0
\f6\b 42 file type
\f1\b0 :\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
This file type is defined by having a\'a0
\f7\i 42 'string' at the 42nd byte
\f1\i0 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If we go to\'a0
\f4 man magic
\f1 \'a0we can see the following break down:\
\pard\tx566\pardeftab720\partightenfactor0
\cf6 \
\cf14 \cb5 https://www.ibm.com/docs/en/zos/2.3.0?topic=formats-magic-format-etcmagic-file\cf6 \cb3 \
\
The magic file contains lines, each line consists of 4 fields, which are separated by one or more tabs:\
\
1- the first field is a byte offset in the file, and the offset immediately follows a continuation character\
2- The 2ns field consists tof the type of the value (in our case is string, it can be signed decimal and unsigned decimal)\
3- This 3rd field, since we have a string value in the 2nd field, then the test will succeed only when a string value exactly matches the bytes from the file\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf0 \cb1 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Byte offset: here we have the 42th octet\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Value type: here we have a string\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Optional relational operator ("=" by default) and value to match (numeric or string constant) here we have 42 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
String to be printed the message is 42 magic\
\pard\tx566\pardeftab720\partightenfactor0
\cf6 \cb3 \
\pard\pardeftab720\partightenfactor0

\f4 \cf25 \cb9 =>\
42	string 42	 42 file\
\
\pard\pardeftab720\partightenfactor0
\cf14 \cb12 \
Piscine 42 schedule:\cf25 \cb9 \
https://github.com/pasqualerossi/42-Piscine/tree/main/42%20Piscine%20Schedule\
\cf14 \cb12 English pfd subjects:\
\pard\pardeftab720\partightenfactor0
\cf25 \cb9 https://github.com/appinha/42sp-piscine/blob/master/PDFs/sujets/d01_shell00-en.pdf\
\
\
\
\
\pard\pardeftab720\qc\partightenfactor0
\cf25 ##SHELL1\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf37 \cb3 EXERCICES 01 print_group.sh\
\
\pard\pardeftab720\partightenfactor0
\cf6 Write a cmd line that will display the list of groups for which the login, contained in the environment variable FT_USER, is a member. Separated by commas without spaces.\
Note that the dollar sign in linux terminal will return the value inside the variable name: \
E.g:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind ~ % FT_USER=mac\
mac@macwind ~ % echo $FT_USER\
mac\
mac@macwind ~ % groups $FT_USER\
staff everyone localaccounts admin _appstore _lpadmin _lpoperator _developer _analyticsusers com.apple.access_ftp com.apple.access_screensharing com.apple.access_ssh com.apple.access_remote_ae\
\pard\pardeftab720\partightenfactor0

\f4 \cf37 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\cf38 The less cmd: \cf6 is a linux terminal pager that shows a file\'92s contents one screen at a time.\
To show all users:\
We use:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf39 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind ~ % less /etc/passwd\cf6 \
\
##\
# User Database\
# \
# Note that this file is consulted directly only when the system is running\
# in single-user mode.  At other times this information is provided by\
# Open Directory.\
#\
# See the opendirectoryd(8) man page for additional information about\
# Open Directory.\
##\
nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false\
root:*:0:0:System Administrator:/var/root:/bin/sh\
daemon:*:1:1:System Services:/var/root:/usr/bin/false\
_uucp:*:4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico\
_taskgated:*:13:13:Task Gate Daemon:/var/empty:/usr/bin/false\
_networkd:*:24:24:Network Services:/var/networkd:/usr/bin/false\
_installassistant:*:25:25:Install Assistant:/var/empty:/usr/bin/false\
_lp:*:26:26:Printing Services:/var/spool/cups:/usr/bin/false\
_postfix:*:27:27:Postfix Mail Server:/var/spool/postfix:/usr/bin/false\
_scsd:*:31:31:Service Configuration Service:/var/empty:/usr/bin/false\
_ces:*:32:32:Certificate Enrollment Service:/var/empty:/usr/bin/false\
_appstore:*:33:33:Mac App Store Service:/var/db/appstore:/usr/bin/false\
_mcxalr:*:54:54:MCX AppLaunch:/var/empty:/usr/bin/false\
:\cf30 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4 \cf25 \cb12 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf25 \cb9 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb15 My 1st proposition: using the sed \'92s/ /,/g\'92 with the g flag to match all occurrences in the text. (From js regex), the plus sign + matches one or more occurrences of the one character regular expression.\cf25 \cb9 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind shell1repo % groups mac | sed 's/ /,/g' \cf30 \
staff,everyone,localaccounts,admin,_appstore,_lpadmin,_lpoperator,_developer,_analyticsusers,com.apple.access_ftp,com.apple.access_screensharing,com.apple.access_ssh,com.apple.access_remote_ae\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 2nd proposition: using \expnd0\expndtw0\kerning0
\CocoaLigature1 [:blank:] or [:space:]: \kerning1\expnd0\expndtw0 \CocoaLigature0 sed 's/[[:blank:]]\\\{1,\\\}/,/g'\cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
  [:blank:]
\f0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0   
\f3 \uc0\u8259 
\f1 	\expnd0\expndtw0\kerning0
Blank characters: space and tab.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u8259 
\f1 	} \expnd0\expndtw0\kerning0
[:space:]\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u8259 
\f1 	}\expnd0\expndtw0\kerning0
Space characters: in the 'C' locale, this is tab, newline,\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u8259 
\f1 	}\expnd0\expndtw0\kerning0
vertical tab, form feed, carriage return, and space.\
\pard\tx566\pardeftab720\partightenfactor0
\cf0 We can use:\
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \\\{1,\\\}\'a0means the same as the extended regular expression modifiers\'a0+\'a0and\'a0\{1,\}\'a0("one or more")\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind shell1repo % groups mac | sed 's/[[:blank:]]\\\{1,\\\}/,/g'\cf30             \
staff,everyone,localaccounts,admin,_appstore,_lpadmin,_lpoperator,_developer,_analyticsusers,com.apple.access_ftp,com.apple.access_screensharing,com.apple.access_ssh,com.apple.access_remote_ae\
\
We use double bracelet [[]], for sed to match in the POSIX character class. If not will only match the alphabets characters of blank or space.\
Also, we use the \cf25 \{1,\\\}\cf6 \cb3  \expnd0\expndtw0\kerning0
\CocoaLigature1 means the same as the extended regular expression modifiers\'a0+\'a0and\'a0\{1,\}\'a0("one or more") when using sed.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb9 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb15 3rd proposition: using the tr command: \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0  tr -s '[:blank:]' '[,*]'\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f4 \cf6 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 tr
\f1 \'a0is a command-line utility in Linux and Unix systems that translates, deletes, and squeezes characters from the standard input and writes the result to the standard output.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind shell1repo % groups mac | tr -s '[:blank:]' '[,*]'\
 \cf30                    \
staff,everyone,localaccounts,admin,_appstore,_lpadmin,_lpoperator,_developer,_analyticsusers,com.apple.access_ftp,com.apple.access_screensharing,com.apple.access_ssh,com.apple.access_remote_ae\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb3 \
tr -s:\expnd0\expndtw0\kerning0
\CocoaLigature1 replaces instances of repeated characters with a single character.\
\pard\pardeftab720\partightenfactor0
\cf6 [,*]\'a0means "as many commas as is needed for this set to match the number of characters in the first set", or\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf37 EXERCICES 02 find_sh\
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb5 Write a cmd line the searches for all names that end with .sh in the current directory and all its sub-directorie. It should display only the file names without the .sh\cf37 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf6 \
NOTE with sed, to recognise the last character .sh we need the dollar sign same as grep: \
As I tried:\
With \cf4 \cb5 find . -type f | grep \'91.sh$\'92 | sed \'92s/\'91.sh\'92//\'91\cf6 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind shell1repo % ./find_sh.sh \
./find.sh\
./ex01/print_groups\
We note it replace the _sh with empty space.\
\
To fix it we use and without \'91\'92 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb18 \expnd0\expndtw0\kerning0
\CocoaLigature1 find . -type f | grep \'91.sh$\'92 | sed \'92s/.sh$//\'91\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind shell1repo % ./find_sh.sh \
./find_sh\
./ex01/print_groups\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 To eliminate character from the dot until the last slash. We use:\
sed \'92s/.*\\///\'91 and as an example we have:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 We use it to eliminate characters from the dot until the ex one using .*ex\
mac@macwind exercices % find . -type f | grep '.sh$'| sed 's/.*ex//' \
./Shell1Repo/find_sh.sh\
01/print_groups.sh\
06/git_ignore.sh\
05/git_commit.sh. \
\
In our case the command line will be:\
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb18 \expnd0\expndtw0\kerning0
\CocoaLigature1 find . -type f | grep \'91.sh$\'92 | sed \'92s/.\\sh$//\'91 | sed \'92s/.*\\///\'91\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind shell1repo % find . -type f | grep '.sh$' | sed 's/.sh$//' | sed 's/.*\\///'\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 find_sh\
print_groups\cf8 \cb18 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind exercices % ./shell1repo/find_sh.sh \cf30 \
find_sh\
print_groups\
git_ignore\
git_commit\
\
\
\pard\pardeftab720\partightenfactor0
\cf37 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 EXERCICES 03 count_files:\
\pard\pardeftab720\partightenfactor0
\cf30 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
Write a cmd line that counts and displays the number of regular files and directories in the current directory and all its sub-directories. It should include \'93.\'94, the starting directory.\
\
\
\cf10 -o:\cf30  means \'93or\'94. For eg:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
mac@macwind exercices % find . -iname a.txt -o -iname  b.txt\
./Shell0Repo/ex07/b.txt\
./b.txt\
./a.txt\
\
\pard\pardeftab720\partightenfactor0

\f4 \cf25 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 #!/bin/sh\
find . -type f -o -type d | wc -l | sed 's/[[:blank:]]\\\{1,\\\}//'\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf37 \cb3 EXERCICES 04 MAC.sh:\
\pard\pardeftab720\partightenfactor0

\f4 \cf25 \cb9 \
\cf6 \cb12 Write a command line that displays your machine\'92s MAC adresses. Each address must be followed by a line break.\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \
\pard\pardeftab720\partightenfactor0

\f1 \cf6 \cb5 The following\'a0
\f6\b ifconfig
\f1\b0 \'a0command with the\'a0
\f6\b -a
\f1\b0 \'a0argument will display information of all active or inactive network interfaces on the server. \
And to grep the info after ether which stands for network address we use:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind ~ % ifconfig -a | grep '[[:blank:]]ether' | sed 's/[[:blank:]]ether //'\cf30 \
ac:de:48:00:11:22 \
fa:ff:c2:44:09:1f \
f8:ff:c2:44:09:1f \
02:e9:7b:46:48:ed \
02:e9:7b:46:48:ed \
82:3a:c9:00:94:01 \
82:3a:c9:00:94:00 \
82:3a:c9:00:94:04 \
82:3a:c9:00:94:05 \
82:3a:c9:00:94:01\cf6 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf6 \
\pard\pardeftab720\partightenfactor0

\f4 \cf6 \cb12 Or \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind ~ % ifconfig -a | grep ether |  cut -c 8-24\cf30 \
\pard\pardeftab720\partightenfactor0

\f4 \cf6 \cb12 \expnd0\expndtw0\kerning0
\CocoaLigature1 Which cut -c 8-24 show all characters from the 8th position to the 24th.\
\
The simplest I think is:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind ~ % ifconfig -a | grep ether | sed 's/[[:blank:]]ether //'\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f4 \cf6 \cb12 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\
\cf25 \cb15 EXERCICE 5:  
\f1 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 "\\?'MaRViN'*1"\
\
\cf40 Create a file containing only \'9342\'94, and nothing else, it\'92s name is \cf30 "\\?'MaRViN'*1" \
\
So for that at first I ran the cmd line \cf4 vi "\\?'MaRViN'*1" \cf30 but it gave dquote \cf14 (to exit this mode we do CTRL G)\cf30 : which meant I didn\'92t complete the double quote and need to write the ending, and for this I wrote : \
\cf4 mac@macwind exercices % vi "\\?$*'MaRViN'*$?\\""\cf30 \
mac@macwind exercices % ls\
Shell0Repo	Shell1Repo	\\?'MaRViN'*1"\cf25 \

\f4 \cb15 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\cf6 \cb12 It gave me 
\f1 \cf30 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \\?'MaRViN'*1" instead of \cf40  \cf30 "\\?'MaRViN\'92*1\'94, so I wrote:\
\
\cf4 mac@macwind exercices % vi "\\"\\?$*'MaRViN'*$?\\""\cf30 \
mac@macwind exercices % ls\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 "\\?'MaRViN'*1"\cf30 	Shell0Repo	Shell1Repo	\\?'MaRViN'*1"\
mac@macwind exercices % \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 Now that the \'93\'94 pb are solved. We notice also that the Dollar sign and the slash won\'92\'92t work, after many essais:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f4 \cf25 \cb15 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind exercices % vi "\\"\\?\\$*'MaRViN\'92*\\$?\\\\\'94\\\'94
\f4 \cf6 \cb12 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
So this is the right script to express the slashes and the dollar sign!\
\
\

\f1 \cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind exercices % ls -lRa *MaRV* \cf30 \
-rw-r--r--  1 mac  staff  5 Jun 23 00:41 "\\?$*'MaRViN'*$?\\"\
\
Change the chmod permission:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f4 \cf6 \cb12 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf8 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind exercices % ls -lRa *MaRV* \cf30 \
-rw-r--r--  1 mac  staff  5 Jun 23 00:41 "\\?$*'MaRViN'*$?\\"\
\cf8 mac@macwind exercices % chmod o+x "\\"\\?\\$*'MaRViN'*\\$?\\\\"\\"\cf30 \
mac@macwind exercices % ls -lRa *MaRV*                     \
-rw-r--r-x  1 mac  staff  5 Jun 23 00:41 "\\?$*'MaRViN'*$?\\"\
\cf8 mac@macwind exercices % chmod o+r "\\"\\?\\$*'MaRViN'*\\$?\\\\"\\"\cf30 \
mac@macwind exercices % ls -lRa *MaRV*                     \
-rw-r--r-x  1 mac  staff  5 Jun 23 00:41 "\\?$*'MaRViN'*$?\\"\
\cf8 mac@macwind exercices % chmod o-x "\\"\\?\\$*'MaRViN'*\\$?\\\\"\\"\cf30 \
mac@macwind exercices % ls -lRa *MaRV*                     \
-rw-r--r--  1 mac  staff  5 Jun 23 00:41 "\\?$*'MaRViN'*$?\\"\
\cf8 mac@macwind exercices % chmod g-r+x "\\"\\?\\$*'MaRViN'*\\$?\\\\"\\"\cf30 \
mac@macwind exercices % ls -lRa *MaRV*                       \
-rw---xr--  1 mac  staff  5 Jun 23 00:41 "\\?$*'MaRViN'*$?\\"\
\
\
And now to turn the file into 2 bytes:\
\
When I write  42 in the file and then run the ls -l,it turned ut I have 3 bytes instead of 2:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 mac@macwind exercices % ls -lRa *MaRV*              \
-rw-r--r--  1 mac  staff  3 Jun 23 02:28 "\\?$*'MaRViN'*$?\\"\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 So I check many forums, and I need to solve this pb, I need to add configuration to the .vimrc file, in order to delete the hidden line, because the text editor add a line at the end of our file. So I used:\
\
\pard\pardeftab720\partightenfactor0
\cf14 \expnd0\expndtw0\kerning0
\CocoaLigature1 set binary\
set noeol\
\
\cf6 And then all is good with the our fiLe:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind exercices % vi "\\"\\?\\$*'MaRViN'*\\$?\\\\"\\"\expnd0\expndtw0\kerning0
\CocoaLigature1 \
\kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind exercices % ls -lRa *MaRV* | cat -e            \
-rw---xr--  1 mac  staff  2 Jun 23 02:29 "\\?$*'MaRViN'*$?\\"$\
mac@macwind exercices % \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f4 \cf25 \cb15 \expnd0\expndtw0\kerning0
\CocoaLigature1 EXERCICE 6:  
\f1 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 Skip\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb3 Write a cmd line that displays every other line for the cmd ls -l, starting from the first line.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \cb5 Awk\cf6 \cb3  is used to:\
\pard\pardeftab720\partightenfactor0
\cf6 \expnd0\expndtw0\kerning0
\CocoaLigature1 Scans a file line by line\'a0\
Splits each input line into fields\'a0\
Compares input line/fields to pattern\'a0\
Performs action(s) on matched lines\'a0\
\pard\pardeftab720\partightenfactor0
\cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 For e.g: to match lines with givin characters:
\f0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs28 \cf14 awk \'91/the character/ \{print\}\'92 thefile\
\cf6 Built-in variables in Awk
\f0\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs28 \cf6 \cb3 To output even lines:\
\pard\pardeftab720\partightenfactor0
\cf8 \cb5 $ awk 'NR%2==0' file\cf6 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 To output odd lines:\
\pard\pardeftab720\partightenfactor0
\cf8 \cb5 $ awk 'NR%2==1\'92 file\
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb9 So both cmd line are working:\cf8 \cb5 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind shell1repo % ls -l | awk 'NR%2==1'\cf30 \
total 0\
drwxr-xr-x  3 mac  staff  96 Jun 20 20:49 ex02\
drwxr-xr-x  3 mac  staff  96 Jun 22 22:01 ex04\
\cf25 mac@macwind shell1repo % ls -l | awk 'NR%2'\cf30    \
total 0\
drwxr-xr-x  3 mac  staff  96 Jun 20 20:49 ex02\
drwxr-xr-x  3 mac  staff  96 Jun 22 22:01 ex04\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 EXERCICE 7 r_dwssap.sh\cf30 \
\
Write a cmd line the display the cat/etc/passwd cmd, removing comments, every other line starting from the 2nd line, reversing each login, sorted in reverse alphabetical order line starting from the 2nd l\'85..\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb3 To remove comments, we use the grep method, and with -v option to override lines that start with a hashtag.\
\
\pard\pardeftab720\partightenfactor0
\cf14 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 grep -v "grep"\cf6 \cb3 \'a0takes input line by line, and outputs only the lines in which\'a0grep\'a0does not appear\cf30 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs30 \cf14 mac@macwind exercices % cat /etc/passwd | grep -v '^#'\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs28 \cf6 This line of code:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \uc0\u9889  cat /etc/passwd | grep -v '^#' | awk 'NR%2==0' | awk -F: '\{print $1\}'
\f0\fs24 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs28 \cf6 Display even lines, and the first field from each line by using: \cf8 \kerning1\expnd0\expndtw0 \CocoaLigature0 awk -F: '\{print $1\}'\cf14  -F: \cf6 Detects the \'91:\'92 in the lines and then \cf14 '\{print $1\}' \cf6 will show the first char \
before the first \'91:\'92\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf41 \cb3 \uc0\u9889  cat /etc/passwd | grep -v '^#' | awk 'NR%2==0' | awk -F: '\{print $1\}'|rev\expnd0\expndtw0\kerning0
\CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb5 The \cf8 \cb12 rev\cf6 \cb5  command line reverse the order of characters for each line as input.
\f0\fs24 \cf14 \cb1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs28 \cf14 \kerning1\expnd0\expndtw0 \CocoaLigature0 \uc0\u9889  cat /etc/passwd | grep -v '^#' | awk 'NR%2==0' | awk -F: '\{print $1\}'|rev | sort -r\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 The \cf8 sort -r\cf14  \cf6 command sort in reverse alphabetical order \
\
After setting our FT_FILE1 and FT_FILE2:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf42 \uc0\u9889 \cf14  cat /etc/passwd | grep -v '^#' | awk 'NR%2==0' | awk -F: '\{print $1\}'|rev | sort -r | sed -n "$\{FT_LINE1\},$\{FT_LINE2\}p"\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 We can use the sed command to match the lines between the given numbers by using \cf8 sed -n \'93n1,n2p\'94\
\
sed -n:\
What is the role of the -n option:\cf14 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 sed processes each line (doing substitutions etc), then prints the result. If the processing involves the line being printed (e.g. sed's\'a0p\'a0command), then it gets printed twice (once during processing, then again by the automatic post-processing print). \
\pard\pardeftab720\partightenfactor0
\cf8 \cb5 The\'a0-n\'a0option\cf6 \cb3  disables the automatic printing, which means the lines you don't specifically tell it to print do not get printed, and lines you do explicitly tell it to print (e.g. with\'a0p) get printed only once.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\cf8 \cb5 \expnd0\expndtw0\kerning0
sed -n '2,3p' test.txt\'a0- prints only lines 2 through 3, as requested\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf8 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
sed '2,3p' test.txt\'a0- prints each line (automatically), AND ALSO prints lines 2-3 a second time\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb3 \kerning1\expnd0\expndtw0 \CocoaLigature0 	\cf14 \cb1 		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 The sed\'92s p command:\
p\cf14  \cf6 stands for printing the sed lines in the cmd.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs36 \cf10 Difference between tr and perl and sed:
\fs28 \cf14 \
\
\cf43 \cb6 https://stackoverflow.com/questions/56864122/replace-newline-with-comma-and-space-to-produce-1-line-output\cf36 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 For tr cmd line, it recognises one character for e.g:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 tr '\\n' \'93 ,\'94\cf30  => would replace new line with just \'91,\'92 without the space.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 BUT\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 perl -pe 's/\\n/, /g'\cf30  => recognises the space we mention after the comma\cf14 \
\
\
\cf8 Perl -pe: \cf14 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \cb5 -p\expnd0\expndtw0\kerning0
\CocoaLigature1 :\cf6 \cb3  Places a printing loop around your command so that it acts on each line of standard input.\kerning1\expnd0\expndtw0 \CocoaLigature0 \
\cf14 \cb5 -e:\cf6 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 Allows you to provide the program as an argument rather than in a file. You don't want to have to create a script file for every little Perl one-liner\kerning1\expnd0\expndtw0 \CocoaLigature0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \cb1 \uc0\u9889  cat /etc/passwd | grep -v '^#' | awk 'NR%2==0' | awk -F: '\{print $1\}'|rev | sort -r | sed -n "$\{FT_LINE1\},$\{FT_LINE2\}p" | perl -pe 's/\\n/, /g'\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 tocevod_, tessaelibom_, svc_, stneveelppa_, sstq_, srotcetedatad_, sorebrek_brk_, soibten_, sergtsop_, 
\f6\b \cf44 \cb30 %
\f1\b0 \cf30 \cb1  \
\
This will return the logins between the ft1 and ft2, and then replace the new line with a comma\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \uc0\u9889  cat /etc/passwd | grep -v '^#' | awk 'NR%2==0' | awk -F: '\{print $1\}'|rev | sort -r | sed -n "\{FT_LINE1\},$\{FT_LINE2\}p\'94 | perl -pe 's/\\n/, /g'| sed 's/, $/./'\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 So the last cmd: sed \cf8 's/, $/./'\cf6  turn the last comma and space into dot like the requirements.\cf25  \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf45 I notice in the output:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 There is the percent symbol at the end of the file and even when doing cat -e t mark a dollar sign at the eof, I don\'92t see the result. \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 The percentage sign (%) at the end of a line indicates a missing newline character (\\n).\
\pard\pardeftab720\partightenfactor0
\cf45 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 Set binary\
Set Noeol\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \
mac@macwind /Users/mac                                               master\
\uc0\u9889  cat /etc/passwd | grep -v '^#' | awk 'NR%2==0' | awk -F: '\{print $1\}'|rev | sort -r | sed -n "7,15p" | perl -pe 's/\\n/, /g'| sed 's/, $/./' | cat -e\cf30 \
tocevod_, tessaelibom_, svc_, stneveelppa_, sstq_, srotcetedatad_, sorebrek_brk_, soibten_, sergtsop_.
\f6\b \cf44 \cb30 %
\f1\b0 \cf30 \cb1                                                          \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 TO SOLVE THIS PB:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \
mac@macwind /Users/mac                                               master\
\uc0\u9889  cat /etc/passwd | grep -v '^#' | awk 'NR%2==0' | awk -F: '\{print $1\}'|rev | sort -r | sed -n "7,15p" | perl -pe 's/\\n/, /g'| sed 's/, $/./' ; echo| cat -e \cf30 \
tocevod_, tessaelibom_, svc_, stneveelppa_, sstq_, srotcetedatad_, sorebrek_brk_, soibten_, sergtsop_.$\cf25 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \
\
We add ; echo after the sed cmd line to add a line at the EOF!! And it works\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb46 ## To solve the slow problem in my terminl after I installed the oh-my-zsh I used the exo 2>zsh.err cmd since  I got many output when running the.set -x\
https://unix.stackexchange.com/questions/565905/oh-my-zshs-prompt-is-slow-how-to-fix-this\cf30 \cb1 \
\
#include <unistd.h>\
\
void ft_print_alphabet(void) \{\
	write(1,"abcdefghijklmnopkqrstuvwxyz",26);\
\
\}\
\
int main() \{\
 ft_print_alphabet();\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf10 A VERY IMPORTANT NOTE WHEN USING EXTERNAL VARIABLE FROM TERMINAL:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 Mention a variable like in the line of code in our shell file:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 #!/bin/sh\
cat /etc/passwd | grep -v '^#' | awk 'NR%2==0' | awk -F: '\{print $1\}'|rev | sort -r | sed -n "$\{FT_LINE1\},$\{FT_USER2\}p" | perl -pe 's/\\n/, /g'| sed 's/, $/./' ; echo| cat -e \
\
mac@macwind shell1repo % ./r_dwssap.sh \
sed: 1: ",p": invalid command code ,\
$\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 THE SOLUTION: \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb7 https://unix.stackexchange.com/questions/278357/setting-variables-from-shell-how-to-use-them-in-a-script\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 It won\'92t return any result because simply even if mentioning our var in the cmd line in the terminal, the shell file can\'92t recognise it.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 mac@macwind shell1repo % FT_LINE1=7 FT_LINE2=10 ./r_dwssap.sh\
tocevod_, tessaelibom_, svc_, stneveelppa_.$\cf30 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 Or MORE EFFICIENT using export vars\cf30 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 mac@macwind shell1repo % export FT_LINE1=7\
mac@macwind shell1repo % export FT_LINE2=15\
mac@macwind shell1repo % vi r_dwssap.sh    \
mac@macwind shell1repo % ./r_dwssap.sh                       \
tocevod_, tessaelibom_, svc_, stneveelppa_, sstq_, srotcetedatad_, sorebrek_brk_, soibten_, sergtsop_.\
mac@macwind shell1repo % \
\
PB SOLVED YAY\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 EXERCICE 8 add_chelou.sh\
\
\pard\pardeftab720\sa240\partightenfactor0
\cf6 \expnd0\expndtw0\kerning0
\CocoaLigature1 Write a command line that takes numbers from variables FT_NBR1, in \'92\\"?! base, and FT_NBR2, in mrdoc base, and displays the sum of both in gtaio luSnemf base. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \kerning1\expnd0\expndtw0 \CocoaLigature0 First we need to understand the code:\
\
The number hidden in FT_NBR1 and FT_NBR3 are the 5base, since\cf6 \expnd0\expndtw0\kerning0
\CocoaLigature1  mrdoc and \'92\\"?! Are composed by 5 characters so for example if we have FT_NBR2=rcrdmddd, it stands for \cf30 \kerning1\expnd0\expndtw0 \CocoaLigature0 14120222.\
And my idea is like this f.g:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 mac@macwind ~ % echo "obase=10;ibase=5;10321201" | bc\cf30 \
88926\
mac@macwind ~ % echo "obase=10;ibase=5;14120222" | bc\
145062\
mac@macwind ~ % echo 88926+145062| bc\
233988\
mac@macwind ~ % echo "obase=13;ibase=10;233988" | bc\
82671\
\
Those lines of code, turn numbers in the input base (ibase) into numbers in the output base, we use 13 base at the finale, since the demanding base contains 13 characters.\
Note that the order of obase ibase is very important in the cmd: \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 echo "obase=13;ibase=10;233988" | bc \cf30 \
bc stands for mathematical operations, it\'92s very important to add it after a pipe. So the cmd line will recognise the mathematical operations, the 2nd code for eg is for addition purpose:\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 IMPORTANT NOTE:\cf30 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 mac@macwind ~ % FT_NBR1=\\\\\\'?\\"\\\\\\"\\'\\\\\
mac@macwind ~ % echo $FT_NBR1\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \\'?"\\"'\\\
\
To express any special char like \'91 \'93 \\ we need to write \\ before each char.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 THE ALGORITHM:\cf30 \
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\CocoaLigature1 {\listtext	1.	}\CocoaLigature0 Take the summ of the two variabes\
\ls6\ilvl0\CocoaLigature1 {\listtext	2.	}\CocoaLigature0 Convert to numbers (in base 5) ( will need to consider special characterd for the first givn base.\
\ls6\ilvl0\CocoaLigature1 {\listtext	3.	}\CocoaLigature0 Run the sum by using the bd\
\ls6\ilvl0\CocoaLigature1 {\listtext	4.	}\CocoaLigature0 Convert to the base 13\
\ls6\ilvl0\CocoaLigature1 {\listtext	5.	}\CocoaLigature0 Convert to characters\
\pard\tx566\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\
the 1. 2. 3. :\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 mac@macwind ~ % echo $one + $two | tr 'mrdoc' '01234' | tr '?!' '34' | tr '\\\\' '1' | tr '\\"' '2'| tr "\\'" '0' | bc\
24441423\
\pard\tx566\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \
The update pf 1,2,3,4:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 mac@macwind ~ % echo "obase=13;ibase=5;$(echo $one + $two | tr 'mrdoc' '01234' | tr '?!' '34'  | tr "\\'" '0' | tr '\\\\' '1' | tr '\\"' '2')" | bc \cf30              \
\
\pard\tx566\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
Remebember we need to use parentheses and quotes before the echo in the third argument to convert the base (\'93echo \'85\'94) \
\
The last step:\
\pard\tx566\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 mac@macwind ~ % echo "obase=13;ibase=5;$(echo $FT_NBR1 + $FT_NBR2 | tr 'mrdoc' '01234' | tr '?!' '34'  | tr "\\'" '0' | tr '\\\\' '1' | tr '\\"' '2')" | bc | tr '0123456789ABC' 'gtaio luSnemf'\
\pard\tx566\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \
\
\
\
\pard\tx566\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \cb3 #include <unistd.h>\
\
void ft_print_alphabet(void) \{\
	write(1,"abcdefghijklmnopkqrstuvwxyz",26);\
\
\}\
\
int main() \{\
 ft_print_alphabet();\
\}
\fs36 \cf14 \cb1 \
\pard\tx566\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\qc\partightenfactor0
\cf14 ##c00\
\
\pard\tx566\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs28 \cf14 EX01  ft_putchar.c\
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 Write a character that displays the character passed as a parameter.\cf14 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 It will be prototyped as follows :\
void ft_putchar(char c);\
To display the character, you must use the function write function as follows.\cf14 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 write(1, &c, 1);\
\
\pard\pardeftab720\partightenfactor0

\f7\i \cf0 https://teletype.in/@udarcs/Wi-zMI77GHF\
\pard\pardeftab720\partightenfactor0

\f1\i0 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf8 NOTE:\
To paste text from the vim editor to an external text editor and the terminal,  must use the \'93+y\'94 after selection the text from the vim editor.\
\
\pard\pardeftab720\partightenfactor0
\cf6 In the ft_putchar.c file:\cf8  \
\
\pard\pardeftab720\partightenfactor0
\cf25 #include <unistd.h>\
\
void ft_putchar(char c) \{\
  write(1,&c,1);\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf8 NOTE:\
To run the program we need to add the line of main() function after the lines of code:\
\pard\pardeftab720\partightenfactor0
\cf14 int main() \{\
	ft_putchar();\
	return 0;\
\} \
\
\
EX01 ft_print_alphabet.c\
\
\pard\pardeftab720\partightenfactor0
\cf25 #include <unistd.h>\
\
void ft_print_alphabet(void) \{\
	write(1,"abcdefghijklmnopkqrstuvwxyz",26);\
\
\}\
\
int main() \{\
 ft_print_alphabet();\
\}\
\pard\pardeftab720\partightenfactor0
\cf14 \
\cf6 In write(), we use quotation \'93 \'93 and not singe quote \'91 \'92.\cf14 \
\cf6 To run the program we can use this easy compilation:\
gcc -W -W -W ft_putchar.c chmod && +x a.out && ./a.out\cf14 \
\
\pard\pardeftab720\partightenfactor0
\cf8 ANOTHER METHODE FOR THIS FUNCTION:\cf6 \
\pard\pardeftab720\partightenfactor0
\cf25 \
#include <unistd.h>\
\
void ft_print_alphabet(void) \{\
	char l = 'a';\
	while( l <= 'z')\{\
		write(1,&l,1);\
		l++;\
	\}\
\}\
\
int main()\{\
	ft_print_alphabet();\
	return 0;\
\}\
\pard\pardeftab720\partightenfactor0
\cf6 \
Remember to use pointer\'92s var in the write function ,n to avoid buffer pb, remember that we can iterate alphabet characters, so that\'92s why we are using the l++ line of code, and same for l <= \'91z\'92\
\cf14 \
\
EX02 ft_print_reverse_alphabet(void) \
\pard\pardeftab720\partightenfactor0
\cf25 \
#include <unistd.h>\
\
void ft_print_reverse_alphabet(void) \{\
	char l = 'z';\
	while( l >= 'a')\{\
		write(1,&l,1);\
		l--;\
	\}\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf6 \
\cf14 EX03 ft_print_numbers\
\cf6 \
\
\
This code won\'92t return anything in the command:\
\pard\pardeftab720\partightenfactor0
\cf4 \
#include <unistd.h>\
\
void ft_print_numbers(void)\{\
	int x=0;\
	while (x<=9)\{\
		write(1,&x,1);\
		x++;	\
\}\
\}\
\
int main()\{\
 ft_print_numbers();\
\}\
\pard\pardeftab720\partightenfactor0
\cf6 \
\
\cf14 Note that the write() function is taking character arguments, and not the int one, so we need to change the type of the variable x into character, like char x; Also, remember to use the \'93..\'94 instead of \'91..\'92\
\pard\pardeftab720\partightenfactor0
\cf25 \
\
\pard\pardeftab720\partightenfactor0
\cf4 But also this code is wrong:\
\
#include <unistd.h>\
\
void ft_print_numbers(void)\{\
	char x=0;\
	while (x<=9)\{\
		write(1,&x,1);\
		x++;	\
\}\
\}\
\
int main()\{\
 ft_print_numbers();\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf25 We need to add the quotation marques:\
\
#include <unistd.h>\
\
void ft_print_numbers(void)\{\
	char x=\'910\'92;\
	while (x<=\'919\'92)\{\
		write(1,&x,1);\
		x++;	\
\}\
\}\
\
int main()\{\
 ft_print_numbers();\
\}\
\pard\pardeftab720\partightenfactor0
\cf14 \
\
\pard\pardeftab720\partightenfactor0
\cf25 This CODE WORKS\cf14 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \kerning1\expnd0\expndtw0 \CocoaLigature0 mac@macwind exercices % gcc -W -W -W ft_print_numbers.c && ./a.out\
0123456789
\f6\b \cb6 %
\f1\b0 \cf25 \cb1  \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 EX04 ft_is_negative.c\cf25 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f6\b \cf47 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf25 \cb5 \
\cf29 \cb12 For testing:\cf25 \cb5 \
\
\cf14 \cb9 #include <unistd.h>\
#include <stdio.h>\
\
void ft_is_negative(int n) \{\
	if (n < 0)\
		write(1,"N",1);\
	else write(1,"P",1);\
\
\}\
\
int main() \{\
	int n;\
	puts("Enter your number: ");\
	scanf("%d",&n);\
	ft_is_negative(n);\
	return 0;\
\}\
\
\
OR ANOTHER METHOD\
\
#include <unistd.h>\
#include <stdio.h>\
\
void ft_is_negative(int n) \{\
	write(1,(n<0)?"N":"P",1);\
\}\
\
int main() \{\
	int n;\
	puts("Enter your number: ");\
	scanf("%d",&n);\
	ft_is_negative(n);\
	return 0;\
\}\
\cf25 \cb5 \
\cf6 \cb15 For returning the 42 file:\cf25 \cb12 \
\
#include <unistd.h>\
\
\
void ft_is_negative(int n) \{\
	write(1,(n<0)?"N":"P",1);\
\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf30 \cb1 mac@macwind exercices % gcc -W -W -W ft_is_negative.c && ./a.out\
Enter your number: \
764\
P
\f6\b \cf44 \cb30 %
\f1\b0 \cf30 \cb1                                                                                                  mac@macwind exercices % gcc -W -W -W ft_is_negative.c && ./a.out\
Enter your number: \
0\
P
\f6\b \cf44 \cb30 %
\f1\b0 \cf30 \cb1                                                                                                  mac@macwind exercices % gcc -W -W -W ft_is_negative.c && ./a.out\
Enter your number: \
-76\
N
\f6\b \cf44 \cb30 %\cf47 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\b0 \cf25 \cb12 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \cb15 To paste outside the vim editor: we need to do quotation with plus with the y \'93+y\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb12 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \cb15 \
EX05 ft_print_comb.c\cf25 \cb12 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb15 Understand the algo: \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 Bsically we have 3 digits xyz, to write all the combos without repetition we in ascending way, we need to understand from writing the first data, we notice that we need to assign to start the z count each times with y+1 if z exceed 9, and same for y if it exceeds 8, assign it the value of x+1, without forgeting to increment the value of z each time, and if it reaches the number 9, increment the y value by 1 too. \cf25 \cb12 \
\
#include <unistd.h>\
#include <stdio.h>\
\
\
void two(void)\{\
\
	char t[5];\
	*t = '0';\
	t[1]= '1';\
	t[2]= '2';\
	t[3]=',';\
	t[4]=' ';\
\
	while (*t < '8')\{\
\
		write(1,t,(*t < '7')? 5:3);\
		t[2]++;              \
		if (t[2]>'9')\{       \cf8 \cb15 /* we can use also ++t[2] but we need to omit ans delete the line of t[2] because with this line can do the work  */\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb12 			t[1]++;\
			if ( t[1]> '8') \{\
				(*t)++;   \cf8 \cb13 /* Remenber to add () parentheses between the pointer */\cf25 \cb12 \
				t[1] = *t +1;\
                        \}\
			t[2]=t[1]+1;\
                 \}\
	\}\
\
\}	\
\
int main() \{\
	two();\
	return 0;\
\}\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs30 \cf30 \cb1 mac@macwind exercices % gcc -W -W -W two.c\
mac@macwind exercices % ./a.out           \
012, 013, 014, 015, 016, 017, 018, 019, 023, 024, 025, 026, 027, 028, 029, 034, 035, 036, 037, 038, 039, 045, 046, 047, 048, 049, 056, 057, 058, 059, 067, 068, 069, 078, 079, 089, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 145, 146, 147, 148, 149, 156, 157, 158, 159, 167, 168, 169, 178, 179, 189, 234, 235, 236, 237, 238, 239, 245, 246, 247, 248, 249, 256, 257, 258, 259, 267, 268, 269, 278, 279, 289, 345, 346, 347, 348, 349, 356, 357, 358, 359, 367, 368, 369, 378, 379, 389, 456, 457, 458, 459, 467, 468, 469, 478, 479, 489, 567, 568, 569, 578, 579, 589, 678, 679, 689, 789
\f6\b \cf44 \cb30 %
\f1\b0 \cf30 \cb1                                          mac@macwind exercices % \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs28 \cf25 \cb12 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf14 \cb15 EX06 ft_print_comb2.c\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb13 #include <stdio.h>\
#include <unistd.h>\
\
void two(void) \{\
	char t[7];\
	*t = '0';\
	t[1]= '0';\
	t[2]= ' ';\
	t[3]= '0';\
	t[4]= '1';\
	t[5]= ',';\
	t[6]= ' ';\
\
while( *t <='9')\{\
    \
	if ( t[4] == '9') \{\
		\
		if (t[3] == '9') \{ \
		  \
		  if (t[1] == '9')\{\
\
			write(1,t,7);\
			(*t)++;\
			t[1] = '0';\
			t[3] = *t;\
			t[4] = '1';\
		  \}\
		  else \{\
			write(1,t,7);\
	    	t[1]++;\
			if ( t[1] != '9') \{\
		     t[3] = *t;\
			 t[4] = t[1] + 1;\
			\}\
			else \{\
				t[3] = *t + 1;\
				t[4] = '0';\
			\}\
			 \
		  \}\
		\}\
		else \{\
			write(1,t,7);\
			t[4] = '0';\
			t[3]++;\
		\}\
	\}\
	else \{\
		write(1,t,7);\
		t[4]++;\
	\}\
	if ( *t == '9' && t[3] == '9' && t[4] == '9') \{\
		write(1,t,5);\
		break;\
	\}\
\}\
\}\
\
int main() \{\
  	two();\
	return 0;\
\}\
\
\cf6 \cb48 I notice all the numbers after the 9 and turn what I notice into a code.\
\
\
\cf14 \cb21 EX07 ft_putnbr.c\cf6 \cb48 \
\
\cf25 \cb49 #include <stdio.h>\
#include <unistd.h>\
\
void ptchar(char c) \{\
    write(1,&c,1);\
\}\
\
void ptnum(int n) \{\
    int d = 1;\
    if ( n < 0 )\{\
      ptchar('-');\
      n = -n;\
    \}\
\
    int p = n;\
    int count = 0;\
\
    do \{                    \cf8 \cb50 /* at first we count how many digits the number is */\cf25 \cb49  \
        n /= 10;\
        ++count;\
    \} while (n !=0);\
\
    if ( count == 1) \{\
        ptchar(n*1+'0');\
    \}\
    else \{\
        count--;             \cf8 \cb50 /*we determinat the biggest power of 10 that devide the \cb51 number */\cf25 \cb49 \
        while (count > 0)\{\
            d *= 10;\
            count--;\
        \}\
        while ( d >= 1)\{    \cf8 \cb50 /*we start to print the quotient of the number and the power of 10*/\cb51 \
\cf25 \cb49             ptchar(p/d +'0');\
            p %= d;\
            d /= 10;\
        \}\
    \}\
\
\
\}\
int main() \{\
    int n;\
    n = -998;\
    ptnum(n);\
\
\}\
\
\
\cf14 \cb50 EX08 ft_print_combn(int n)\cf25 \cb48 \
\
\pard\pardeftab720\partightenfactor0
\cf25 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 #include <unistd.h>\
#include <stdio.h>\
\
void    ft_print_combn(int n)\
\{\
    char    t[11];\
    int     i;\
\
    if (n < 1 || n > 9)\
        return ;\
    *t = '0';\
    i = 0;\
    while (++i < n)\
        t[i] = t[i - 1] + 1;\
    t[n] = ',';\
    t[n + 1] = ' ';\
    while (*t <= 58 - n)\
    \{\
        write(1, t, n + ((*t != 58 - n) ? 2 : 0));\
        i = n;\
        while (i)\{\
		   i\'97-;\
            if (++t[i] <= 58 - n + i)\
             break ;\
       \}\
        while (++i < n)\
            t[i] = t[i - 1] + 1;\
    \}\
\}\
\
int main() \{\
    ft_print_combn(2);\
    ft_print_combn(3);\
    ft_print_combn(4);\
    \
\}
\fs30 \cf52 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs28 \cf25 \cb48 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\qc\partightenfactor0

\fs36 \cf14 \cb53 ## C01
\fs28 \cf25 \cb48 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf8 \cb53 REMEMBER:\
To turn numbers from 0 to 9 into char so it can be used in the write() function:\cf25 \cb48 \
\
\pard\pardeftab720\partightenfactor0
\cf25 \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1 #include <stdio.h>\
#include <unistd.h>\
\
#convert one number to character using write\
void ft_putchar(char c) \{\
  write(1,&c,1);\
\}\
\
int main()\{\
 \
 int n;\
 n = 5;\
 ft_putchar(n*1+'0');\
\
\}\
\
\
\pard\pardeftab720\partightenfactor0
\cf14 \cb9 EX00 ft_ft.c\
\pard\pardeftab720\partightenfactor0
\cf25 \cb1 \
void ft_ft(int *nbr) \{\
	*nbr = 42;\
\}\
\pard\pardeftab720\partightenfactor0

\fs30 \cf52 \

\fs28 \cf25 \cb5 \
\pard\pardeftab720\partightenfactor0
\cf14 \cb9 EX01 ft_ultimate_ft.c\
\
\pard\pardeftab720\partightenfactor0
\cf25 \cb12 void ft_ultimate_ft(int *********nbr) \{\
	*********nbr = 42;\
\}\
\
\cf14 \cb15 EX02 ft_swap.c\
\cf25 \cb12 \
void  ft_ft(int *a, int *b) \{\
   int c;\
   c = *a;\
   *a= *b;\
   *b = c;\
\
    \
\}
\fs30 \cf52 \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf14 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs28 \cf14 \cb53 \kerning1\expnd0\expndtw0 \CocoaLigature0 EX03 ft_div_mod.c\cf25 \cb48 \
\
void ft_div_mod(int a, int b, int *div, int *mod)\{\
    int q, r;\
    q = a/b;\
    r = a%b;\
    *div = q;\
    *mod = r;\
\}\
\
\cf14 \cb53 EX04 ft_ultimate_div_mod.c\cf25 \cb48 \
\
void ft_div(int *a, int *b)\{\
    int c;\
    c = *b;\
    *b = (*a)/(*b);\
    *a = (*a)%c;\
\
\}\
\
\cf14 \cb53 EX05 ft_putstr.c\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf25 \cb48 \
\
\pard\pardeftab720\partightenfactor0
\cf37 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 #include <stdio.h>\
#include <unistd.h>\
\
void ft_str(char *c)\{\
    \
    //printf("%s\\n",c+1);\
    //write(1,c,1);            \cf8 \cb9 //w\cb5 e mustn't use the write(1,*c;1) it returns error since 2nd arg is buffer \cf37 \cb3  \
    //write(1,c+1,1);\
   // write(1,c+2,1);\
    int n = 0;\
    while ( c[n] != '\\0') \{    \cf8 \cb5 // c[1] will be showing blddlc and c[5] will e showing land so on..\cf37 \cb3 \
        write(1,c+n,1);\
        n++;\
    \}\
       \
\}\
\
int main()\{\
    char c[] = "ablddlc";\
    ft_str(c);\
\}\
\
\
\pard\pardeftab720\partightenfactor0
\cf14 \cb9 Remember: \cf37 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb5 we need to use this: \cf45 \cb9 write(1,c,1)\cf6 \cb5  instead of write(1,*c,1).\
\pard\pardeftab720\partightenfactor0
\cf45 \cb9 write(1,c+1,1) \cf6 \cb12 returns in this example b since c+1 returns blddlc, same for c[1]\
\pard\pardeftab720\partightenfactor0
\cf37 \cb3 \
\
\pard\pardeftab720\partightenfactor0
\cf14 \cb5 EX06 ft_strlen.c\cf37 \cb3 \
\
#include <stdio.h>\
#include <unistd.h>\
\
void putint(char c, int n)\{\
    write(1,&c,n);\
\}\
int ft_str(char *c)\{\
    int n = 0;\
\
    while (c[n]) \{   \
        n++;\
    \}  \
    return n;\
\}\
\
int main()\{\
    char c[] = "abl";\
    printf("%d\\n",ft_str(c));   \cf8 \cb5 //we return a function with its arg and not an int lll\'f2\'f2ll\cf37 \cb3 \
\}\
\pard\pardeftab720\partightenfactor0

\fs30 \cf52 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf37 \cb3 \
\
\pard\pardeftab720\partightenfactor0
\cf14 \cb5 EX07 ft_rev_int_tab()\
\pard\pardeftab720\partightenfactor0
\cf37 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb5 Remember:\cf37 \cb3 \
\
\cf6 \cb5 _To return a variable in a function, we need to use char if its a value or \cf8 \cb9 int if it\'92s a number \cf6 \cb5 or \cf8 \cb9 int * if it\'92s an array \cf6 \cb5 and \cf45 \cb9 not void\cf6 \cb5 . Also to return a new array we must declare the array inside the function with static, since it will return this error:\
\pard\pardeftab720\partightenfactor0
\cf54 \cb3 tempCodeRunnerFile.c:7:12: warning: address of stack memory associated with local variable 'rev' returned [-Wreturn-stack-address]\
    return rev;
\fs30 \cf52 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf37 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf25 \cb9 Read:\cf6 \cb5  https://stackoverflow.com/questions/18041100/using-c-string-gives-warning-address-of-stack-memory-associated-with-local-var\
\
_Also this array inside the function should have a defined length and not a variable as an l\cb9 en\cb5 , it returns an error else wise: \cf37 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf54 tempCodeRunnerFile.c:4:16: error: variable length array declaration cannot have 'static' storage duration\
    static int rev[size];\
\pard\pardeftab720\partightenfactor0
\cf25 \cb48 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
Read:\cf6 \cb53  https://stackoverflow.com/questions/10675399/why-cant-the-size-of-a-static-array-be-made-variable\cf25 \cb48 \
\
\
\cf14 \cb53 FIRST METHOD:\cf25 \cb48 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 #include <stdio.h>\
\
int * ft_rev_int_tab(int *tab, int size) \{\
    int rev[size];\
    for (int i=0;i < size; i++)\
        rev[i] = tab[size - i -1];\
    for (int i = 0; i < size; i++) \
       tab[i] = rev[size - i -1];\
    return tab;\
\}\
\
int main()\{\
    int size = 4;\
    int tab[size];\
    tab[0] = 1;\
    tab[1] = 2;\
    tab[2] = 3;\
    tab[3] = 4; \
    ft_rev_int_tab(tab,size);\
    \
 \}\
\
2nd method:\
\
\pard\pardeftab720\partightenfactor0
\cf37 #include<stdio.h>\
\
void swap(int *a, int *b)\{\
    int c;\
    c = *b;\
    *b = *a;\
    *a = c;\
\
\}\
void ft_rev_int_tab(int *tab, int size)\{\
    int step=0;\
    \
    while(--size > step) \
      swap(&tab[step++],&tab[size]);\
    \
\}\
\
int main()\{\
    int size = 5;\
    int tab[size];\
    tab[0] = 1;\
    tab[1] = 2;\
    tab[2] = 3;\
    tab[3] = 4; \
    tab[4] = 5;\
    \
    ft_rev_int_tab(tab,size);\
    for (int i = 0; i < size; i++) \
      printf("%d", tab[i]);\
\
\}
\fs30 \cf52 \cb1 \
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf6 In this method, we use the algorithm that swap the two array\'92s elements from the first position to the end. The only method to stop the loop is that the step will go up more that the size.\
\
We write:\
Syntax on in .vimrc file to have highlights in the vim codes.\
\pard\pardeftab720\partightenfactor0

\fs30 \cf52 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf25 \cb48 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\
\cf14 \cb53 EX08 ft_sort_int_tab.c\
\
\cf25 \cb48 \
\pard\pardeftab720\partightenfactor0
\cf37 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 #include <stdio.h>\
\
void swap(int *a, int *b)\{\
    \
    int c;\
    c = *b;\
    *b = *a;\
    *a = c;\
\
\}\
void ftsort(int *tab, int size)\{.  \cf8 \cb5 ##the algo is to compare between two values and set the count to 0, so it counts again until all the values got updated.\
\cf37 \cb3     \
    int i=0;\
    while(i < size) \{       \
\
       if ( tab[i+1] < tab[i]) \{\
         swap(&tab[i],&tab[i+1]);\
         i = 0;\
       \}\
        else i++;\
    \}\
    \
\}\
\
int main()\{\
    int size = 5;\
    int tab[size];\
    tab[0] = 0;\
    tab[1] = -4; \
    tab[2] = -3;\
    tab[3] = 59; \
    tab[4] = 1;   \
    \
    ftsort(tab,size);\
    for (int i = 0; i < size; i++) \
      printf("%d", tab[i]);\
\
\}\
\pard\pardeftab720\partightenfactor0
\cf25 \cb48 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\
\cf6 \cb53 I faced a pb:\cf54 \cb3  \expnd0\expndtw0\kerning0
\CocoaLigature1 /bin/sh: line 1:  2192 Segmentation fault: 11  "/Users/mac/Desktop/Exercices/testcode/"tempCodeRunnerFile
\fs30 \cf52 \cb1 \

\fs28 \cf6 \cb53 \kerning1\expnd0\expndtw0 \CocoaLigature0  concerning the null and negative value when setting the if statement to: \cb5 \expnd0\expndtw0\kerning0
\CocoaLigature1  \cf4 \cb12 if\cb9  ( tab[i] < tab[i-1]). \cf6 \cb12 But it\'92s fixed when turning it to : \cf37 \cb3 if ( tab[i+1] < tab[I]).\
\
\
\pard\pardeftab720\partightenfactor0
\cf14 \cb5 2nd method:\
\pard\pardeftab720\partightenfactor0
\cf6 \cb19 \
Pivot algorithm method:\
\
\pard\pardeftab720\partightenfactor0
\cf14 \cb5 \
\pard\pardeftab720\partightenfactor0
\cf45 \cb9 https://www.programiz.com/dsa/quick-sort#:~:text=An%20array%20is%20divided%20into,right%20side%20of%20the%20pivot.\
\
\pard\pardeftab720\partightenfactor0

\fs26 \cf45 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf36 \cb3 #include <stdio.h>\
\
void    ft_swap(int *a, int *b)\
\{\
    int c;\
\
    c = *a;\
    *a = *b;\
    *b = c;\
\}\
\
void    ftsort(int *tab, int size)\
\{\
    int pivot;\
    int i;\
    int j;\
\
    if (size < 2)\
        return ;\
    pivot = tab[--size];\
    i = 0;\
    j = -1;\
    while (++j < size)\
        if (tab[j] < pivot)\
            ft_swap(&tab[i++], &tab[j]);\
    if (tab[i] > tab[size])\
        ft_swap(&tab[i], &tab[size]);\
    ftsort(tab, i);\
    ftsort(tab + i + 1, size - i);\
\}\
\
\
int main()\{\
    int size = 4;\
    int tab[size];\
    tab[0] = 8;\
    tab[1] = 4; \
    tab[2] = -2;\
    tab[3] = 3;\
    \
    \
    ftsort(tab,size);\
    for (int i = 0; i < size; i++) \
      printf("%d", tab[i]);\
\
\}\
\
\
\
\pard\pardeftab720\qc\partightenfactor0

\fs36 \cf36 ##C02\
\
\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf25 \cb9 Remember to return \cf8 \cb12 array[i]\cf25 \cb9 , or use it in a function that takes a pointer like most of the exercises, we must use \cf8 \cb12 &array[i]\cf25 \cb9 .
\fs36 \cf36 \cb3 \
\pard\pardeftab720\qc\partightenfactor0
\cf36 \
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf36 EX00 ft_strcpy\
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb9 strcpy()\cf6 \cb3  is a standard library function in C/C++ and is used to copy one string to another. In C it is present in\'a0string.h\'a0header file and in C++ it is present in\'a0cstring\'a0header file.\'a0\
\cf8 \cb5 Return Value:\cf6 \cb3 \'a0After copying the source string to the destination string, the strcpy() function returns a pointer to the destination string.\
\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cf58 \cb59 #include \cf60 <unistd.h>\cf52 \cb1 \
\
\cb59  \cf58 char\cf52     *ft_strcpy(\cf58 char\cf52  *dest, \cf58 char\cf52  *src) \{\cb1 \
\cb59   \cf58 int\cf52  i=\cf61 0\cf52 ;\cb1 \
\
\cb59   \cf58 do\cf52 \{ \cb1 \
\cb59     dest[i] = src[i];\cb1 \
\cb59   \}\cf58 while\cf52 (dest[++i]);\cb1 \
\cb59   dest[i] = \cf60 '\\0'\cf52 ;\cb1 \
\cb59   \cf58 return\cf52  dest;\cb1 \
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  main()\cb1 \
\cb59 \{\cb1 \
\cb59     \cf58 int\cf52  i;\cb1 \
\cb59     \cf58 char\cf52  b[\cf61 40\cf52 ] = \cf60 "Hi there"\cf52 ;\cb1 \
\cb59     \cf58 char\cf52  a[\cf61 40\cf52 ];\cb1 \
\cb59     ft_strcpy(a,b);\cb1 \
\cb59     \cf58 for\cf52  (i=\cf61 0\cf52 ;i<\cf61 40\cf52 ;i++)\{\cb1 \
\cb59       write(\cf61 1\cf52 ,a+i,\cf61 1\cf52 );\cb1 \
\cb59     \}\cb1 \
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf6 \cb3 \
\
\pard\pardeftab720\partightenfactor0
\cf14 \cb5 EX01 ft_strncpy\
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 The C library function\'a0char \cf8 \cb9 *strncpy\cb5 (char *dest, const char *src, size_t n)\cf0 \cb3 \'a0copies up to\'a0n\'a0characters from the string pointed to, by\'a0src\'a0to\'a0dest. In a case where the length of src is less than that of n, the remainder of dest will be padded with null bytes.\
\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cf58 \cb59 #include \cf60 <unistd.h>\cf52 \cb1 \
\
\cf58 \cb59 char\cf52     *ft_strncpy(\cf58 char\cf52  *dest, \cf58 char\cf52  *src, \cf58 unsigned\cf52  \cf58 int\cf52  n)\cb1 \
\cb59 \{\cb1 \
\cb59     \cf58 int\cf52  i=\cf61 0\cf52 ;\cb1 \
\
\cb59     \cf58 do\cf52 \{ \cb1 \
\cb59         dest[i] = src[i];\cb1 \
\cb59     \}\cf58 while\cf52 (++i<n && src[i]);\cb1 \
\cb59         \cf58 while\cf52  (i<n)\cb1 \
\cb59         dest[i++] = \cf60 '\\0'\cf52 ;\cb1 \
\
\cb59     \cf58 return\cf52  dest;\cb1 \
\cb59 \}\cb1 \
\cb59     \cb1 \
\
\cf58 \cb59 int\cf52  main()\cb1 \
\cb59 \{\cb1 \
\cb59     \cf58 int\cf52  i;\cb1 \
\cb59     \cf58 char\cf52  b[\cf61 40\cf52 ] = \cf60 "Hi there"\cf52 ;\cb1 \
\cb59     \cf58 char\cf52  a[\cf61 40\cf52 ];\cb1 \
\cb59     ft_strncpy(a,b,\cf61 4\cf52 );\cb1 \
\cb59     \cf58 for\cf52  (i=\cf61 0\cf52 ;i<\cf61 40\cf52 ;i++)\{\cb1 \
\cb59       write(\cf61 1\cf52 ,a+i,\cf61 1\cf52 );\cb1 \
\cb59     \}\cb1 \
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf14 \cb5 EX02 ft_str_is_alpha\cf0 \cb3 \
\cf6 \
Create a function that returns 1 if the string given as a parameter contains only alphabetical characters, and 0 if it contains any other character.\cf14 \cb5 \
\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 int\cf52  ft_str_is_alpha(\cf58 char\cf52  *str)\cb1 \
\cb59 \{\cb1 \
\cb59   \cf58 int\cf52  i;\cb1 \
\cb59   i = -\cf61 1\cf52 ;\cb1 \
\cb59   \cf58 if\cf52  (!(str[\cf61 0\cf52 ])) \cf58 return\cf52  \cf61 0\cf52 ; \cf62 //c'est l'expression d'une chaine vide\cf52 \cb1 \
\cb59   \cf58 while\cf52 (str[++i]) \{\cb1 \
\cb59     \cf58 if\cf52  ((str[i]>= \cf61 65\cf52  && str[i] <= \cf61 90\cf52 ) || (str[i]>= \cf61 97\cf52  && str[i] <= \cf61 122\cf52 ))\cb1 \
\cb59       \cf58 continue\cf52 ;\cb1 \
\cb59     \cf58 else\cf52  \cf58 return\cf52  \cf61 0\cf52 ;\cb1 \
\cb59   \}\cb1 \
\cb59   \cf58 return\cf52  \cf61 1\cf52 ;\cb1 \
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf14 \cb9 \
EX03 \cb1 ft_str_is_numeric\cf0 \
\
Create a function that returns 1 if the string given as a parameter contains only digits, and 0 if it contains any other character.\cf14 \cb5 \
\cf36 \cb3 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\
\cb59     \cf58 int\cf52  ft_str_is_numerci(\cf58 char\cf52  *str)\{\cb1 \
\cb59         \cb1 \
\cb59         \cf58 while\cf52 (*str)\{\cb1 \
\cb59             \cf58 if\cf52  ((*str)>=\cf60 '0'\cf52  && (*str) <= \cf60 '9'\cf52 )\cb1 \
\cb59               str++;\cb1 \
\cb59             \cf58 else\cf52  \cf58 return\cf52  \cf61 0\cf52 ;\cb1 \
\cb59         \}\cb1 \
\
\cb59         \cf58 return\cf52  \cf61 1\cf52 ;\cb1 \
\
\cb59     \}\cb1 \
\cf58 \cb59 int\cf52  main()\{\cb1 \
\cb59     \cf58 char\cf52  b\cf58 []\cf52  = \cf60 "123443"\cf52 ;\cb1 \
\cb59     \cf58 int\cf52  i;\cb1 \
\cb59     i = ft_str_is_numerci(b);\cb1 \
\cb59     printf(\cf60 "%d"\cf52 ,i);\cb1 \
\
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf36 \cb3 \
\cf14 \cb5 EX04 \cb1 ft_str_is_lowercase
\f0\fs24 \cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf6 \cb5 Create a function that returns 1 if the string given as a parameter contains only lowercase alphabetical characters, and 0 if it contains any other character.\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\
\cf58 \cb59 int\cf52  ft_str_is_lowercase(\cf58 char\cf52  *str) \{\cb1 \
\cb59     \cf58 int\cf52  i=-\cf61 1\cf52 ;\cb1 \
\cb59     \cf58 while\cf52  (str[++i]) \{\cb1 \
\cb59         \cf58 if\cf52  ( str[i] >= \cf60 'a'\cf52  && str[i] <= \cf60 'z'\cf52  )\cb1 \
\cb59           \cf58 continue\cf52 ;\cb1 \
\cb59         \cf58 else\cf52  \cf58 return\cf52  \cf61 0\cf52 ;\cb1 \
\cb59     \}\cb1 \
\
\cb59     \cf58 return\cf52  \cf61 1\cf52 ;\cb1 \
\
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  main()\cb1 \
\cb59 \{\cb1 \
\cb59     \cf58 int\cf52  i;\cb1 \
\cb59     \cf58 char\cf52  b[\cf61 40\cf52 ] = \cf60 "abcds"\cf52 ;\cb1 \
\cb59     i=ft_str_is_lowercase(b);\cb1 \
\cb59     printf(\cf60 "%d"\cf52 , i);\cb1 \
\
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf6 \cb5 \
\
\pard\pardeftab720\partightenfactor0
\cf14 \cb15 EX05 \cb1 ft_str_is_uppercase\cf6 \
\
Create a function that returns 1 if the string given as a parameter contains only uppercase alphabetical characters, and 0 if it contains any other character.\
\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\
\cf58 \cb59 int\cf52  ft_str_is_uppercase(\cf58 char\cf52  *str) \{\cb1 \
\cb59     \cf58 int\cf52  i=-\cf61 1\cf52 ;\cb1 \
\cb59     \cf58 while\cf52  (str[++i]) \{\cb1 \
\cb59         \cf58 if\cf52  ( str[i] >= \cf60 'A'\cf52  && str[i] <= \cf60 'Z'\cf52  )\cb1 \
\cb59           \cf58 continue\cf52 ;\cb1 \
\cb59         \cf58 else\cf52  \cf58 return\cf52  \cf61 0\cf52 ;\cb1 \
\cb59     \}\cb1 \
\
\cb59     \cf58 return\cf52  \cf61 1\cf52 ;\cb1 \
\
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  main()\cb1 \
\cb59 \{\cb1 \
\cb59     \cf58 int\cf52  i;\cb1 \
\cb59     \cf58 char\cf52  b[\cf61 40\cf52 ] = \cf60 "JKDCSJ"\cf52 ;\cb1 \
\cb59     i=ft_str_is_uppercase(b);\cb1 \
\cb59     printf(\cf60 "%d"\cf52 , i);\cb1 \
\
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf6 \
\pard\pardeftab720\partightenfactor0
\cf14 EX06  ft_str_is_printable\cf6 \
\
Create a function that returns 1 if the string given as a parameter contains only printable characters, \
and 0 if it contains any other character.\
\pard\pardeftab720\partightenfactor0

\fs30 \cf62 \cb59 //http://facweb.cs.depaul.edu/sjost/it212/documents/ascii-pr.htm\cf52 \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cb59     \cb1 \
\cf58 \cb59 int\cf52  ft_str_is_printable(\cf58 char\cf52  *s)\{\cb1 \
\cb59     \cf58 int\cf52  i = -\cf61 1\cf52 ;\cb1 \
\cb59     \cf58 while\cf52 (s[++i])\{\cb1 \
\cb59         \cf58 if\cf52 ( s[i] >= \cf61 32\cf52  && s[i]<= \cf61 127\cf52 )\cb1 \
\cb59             \cf58 continue\cf52 ;\cb1 \
\cb59         \cf58 return\cf52  \cf61 0\cf52 ;\cb1 \
\cb59     \}\cb1 \
\cb59     \cf58 return\cf52  \cf61 1\cf52 ;\cb1 \
\cb59     \cb1 \
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  main()\{\cb1 \
\
\cb59     \cf58 char\cf52  b\cf58 []\cf52  = \cf60 "    "\cf52 ;   \cf62 //we assigned tab to b so the program will return 0\cf52 \cb1 \
\cb59     \cf58 int\cf52  i;\cb1 \
\cb59     i = ft_str_is_printable(b);\cb1 \
\cb59     printf(\cf60 "%d"\cf52 ,i);\cb1 \
\
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf6 \
\pard\pardeftab720\partightenfactor0
\cf14 EX07 ft_strupcase\
\pard\pardeftab720\partightenfactor0
\cf6 \
\pard\pardeftab720\partightenfactor0
\cf0 Create a function that transforms every letter to uppercase.\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cf58 \cb59 #include \cf60 <unistd.h>\cf52 \cb1 \
\
\cf58 \cb59 char\cf52  *ft_strupcase(\cf58 char\cf52  *str) \{\cb1 \
\cb59     \cf58 int\cf52  i=\cf61 0\cf52 ;\cb1 \
\
\cb59     \cf58 do\cf52 \{\cb1 \
\cb59        \cf58 if\cf52  ( str[i] >= \cf61 97\cf52  && str[i] <= \cf61 122\cf52 )\cb1 \
\cb59         str[i]-=\cf61 32\cf52 ;\cb1 \
\
\cb59     \}\cf58 while\cf52 (str[++i]);\cb1 \
\
\cb59     \cf58 return\cf52  str;\cb1 \
\
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  main() \{\cb1 \
\cb59     \cf58 char\cf52  b[\cf61 40\cf52 ] = \cf60 "Hi there 1272 ghdj jjsn HJKSKJ jjs"\cf52 ;\cb1 \
\cb59     ft_strupcase(b);\cb1 \
\cb59     \cf58 for\cf52  (\cf58 int\cf52  i=\cf61 0\cf52 ;i<\cf61 40\cf52 ;i++)\{\cb1 \
\cb59       write(\cf61 1\cf52 ,b+i,\cf61 1\cf52 );\cb1 \
\cb59     \}\cb1 \
\
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 \
\
\cf14 EX08 \kerning1\expnd0\expndtw0 \CocoaLigature0 ft_strlowcase\cf6 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \expnd0\expndtw0\kerning0
\CocoaLigature1 Create a function that transforms every letter to lowercase.\
\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cf58 \cb59 #include \cf60 <unistd.h>\cf52 \cb1 \
\
\cf58 \cb59 char\cf52  *ft_strlowercase(\cf58 char\cf52  *str) \{\cb1 \
\cb59     \cf58 int\cf52  i=\cf61 0\cf52 ;\cb1 \
\
\cb59     \cf58 do\cf52 \{\cb1 \
\cb59        \cf58 if\cf52  ( str[i] >= \cf61 65\cf52  && str[i] <= \cf61 90\cf52 )\cb1 \
\cb59         str[i]+=\cf61 32\cf52 ;\cb1 \
\
\cb59     \}\cf58 while\cf52 (str[++i]);\cb1 \
\
\cb59     \cf58 return\cf52  str;\cb1 \
\
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  main() \{\cb1 \
\cb59     \cf58 char\cf52  b[\cf61 40\cf52 ] = \cf60 "Hi there 1272 ghdj jjsn HJKSKJ jjs"\cf52 ;\cb1 \
\cb59     ft_strlowercase(b);\cb1 \
\cb59     \cf58 for\cf52  (\cf58 int\cf52  i=\cf61 0\cf52 ;i<\cf61 40\cf52 ;i++)\{\cb1 \
\cb59       write(\cf61 1\cf52 ,b+i,\cf61 1\cf52 );\cb1 \
\cb59     \}\cb1 \
\
\cb59 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf6 \
\pard\pardeftab720\partightenfactor0
\cf14 EX09 ft_strcapitalize\
\pard\pardeftab720\partightenfactor0
\cf6 \
Create a function that capitalizes the first letter of each word and transforms all other letters to lowercase.\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cf58 \cb59 #include \cf60 <unistd.h>\cf52 \cb1 \
\
\cf58 \cb59 char\cf52  ft_strupcase(\cf58 char\cf52  *str) \{\cb1 \
\
\cb59      \cf58 if\cf52  ( *str >= \cf61 97\cf52  && *str <= \cf61 122\cf52 )\cb1 \
\cb59         *str -=\cf61 32\cf52 ;\cb1 \
\
\cb59     \cf58 return\cf52  *str;\cb1 \
\
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  ft_str_is_numerci(\cf58 char\cf52  *str)\{\cb1 \
\cb59         \cb1 \
\cb59     \cf58 if\cf52  ((*str)>=\cf60 '0'\cf52  && (*str) <= \cf60 '9'\cf52 )\cb1 \
\cb59         \cf58 return\cf52  \cf61 1\cf52 ;\cb1 \
\
\cb59     \cf58 return\cf52  \cf61 0\cf52 ;\cb1 \
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  ft_str_is_alpha(\cf58 char\cf52  *str)\cb1 \
\cb59 \{\cb1 \
\cb59   \cb1 \
\cb59     \cf58 if\cf52  ((*str>= \cf61 65\cf52  && *str <= \cf61 90\cf52 ) || (*str >= \cf61 97\cf52  && *str <= \cf61 122\cf52 ))\cb1 \
\cb59       \cf58 return\cf52  \cf61 1\cf52 ;\cb1 \
\
\cb59     \cf58 return\cf52  \cf61 0\cf52 ;\cb1 \
\cb59 \}\cb1 \
\
\cf58 \cb59 char\cf52     *ft_strcapitalize(\cf58 char\cf52  *str) \{\cb1 \
\cb59     \cb1 \
\cb59     \cf58 int\cf52  i=\cf61 0\cf52 ;\cb1 \
\cb59     ft_strupcase(&str[\cf61 0\cf52 ]);\cb1 \
\cb59     \cf58 do\cf52  \{\cb1 \
\cb59         \cf58 if\cf52 (!(ft_str_is_numerci(&str[i]) || ft_str_is_alpha(&str[i])))\cb1 \
\cb59             ft_strupcase(&str[i+\cf61 1\cf52 ]);\cb1 \
\cb59         \}\cf58 while\cf52 (str[++i] && str[i+\cf61 1\cf52 ] != \cf60 '\\0'\cf52 );\cb1 \
\
\cb59     \cf58 return\cf52  str;\cb1 \
\cb59     \cb1 \
\
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  main()\cb1 \
\cb59 \{\cb1 \
\cb59     \cf58 int\cf52  i;\cb1 \
\cb59     \cf58 char\cf52  b[\cf61 100\cf52 ] = \cf60 "salut, comment tu vas ? 42mots quarante-deux; cinquante+et+un"\cf52 ;\cb1 \
\
\cb59      \cf62 //printf("%d",ft_str_is_numerci(&b[5]));\cf52 \cb1 \
\cb59    ft_strcapitalize(b);\cb1 \
\cb59     \cf58 for\cf52  (i=\cf61 0\cf52 ;i<\cf61 100\cf52 ;i++)\cb1 \
\cb59        write(\cf61 1\cf52 ,b+i,\cf61 1\cf52 );\cb1 \
\cb59     \cb1 \
\
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf14 \
EX10 ft_strlcpy\cf6 \
\
https://documentation.help/Cpp/strlcpy.htm\
\pard\pardeftab720\partightenfactor0
\cf6 The\'a0strlcpy()\'a0function copies up to\'a0size\'a0\uc0\u8722  1 characters from the NUL-terminated string\'a0src\'a0to\'a0dst, NUL-terminating the result.\
It returns the len of the source array.\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cf58 \cb59 #include \cf60 <unistd.h>\cf52 \cb1 \
\
\
\cf58 \cb59 int\cf52  ft_strlen(\cf58 char\cf52  *str) \{\cb1 \
\
\cb59     \cf58 int\cf52  n;\cb1 \
\cb59     n = \cf61 0\cf52 ;\cb1 \
\cb59     \cf58 while\cf52 (str[n]) n++;\cb1 \
\cb59     \cf58 return\cf52  n;\cb1 \
\cb59     \}\cb1 \
\
\cf58 \cb59 unsigned\cf52  \cf58 int\cf52  ft_strlcpy(\cf58 char\cf52  *dest, \cf58 char\cf52  *src, \cf58 unsigned\cf52  \cf58 int\cf52  size)\{\cb1 \
\
\cb59     \cf58 unsigned\cf52  \cf58 int\cf52  len;\cb1 \
\cb59     len = ft_strlen(src);\cb1 \
\cb59     \cb1 \
\cb59     \cf58 unsigned\cf52  \cf58 int\cf52  j;\cb1 \
\
\cb59     \cf58 if\cf52  (len < size -\cf61 1\cf52 ) \{\cb1 \
\cb59         j = -\cf61 1\cf52 ;\cb1 \
\cb59         \cf58 while\cf52 ( ++j < len+\cf61 1\cf52 )\cb1 \
\cb59             dest[j] = src[j];\cb1 \
\cb59     \}\cb1 \
\
\cb59     \cf58 else\cf52  \cf58 if\cf52  (size)\cb1 \
\
\cb59     \{\cb1 \
\cb59         j=-\cf61 1\cf52 ;\cb1 \
\cb59         \cf58 while\cf52 (++j<size -\cf61 1\cf52 )\cb1 \
\cb59             dest[j] = src[j];\cb1 \
\cb59         dest[j] = \cf60 '\\0'\cf52 ;\cb1 \
\
\cb59     \}\cb1 \
\
\cb59     \cf58 return\cf52  len;\cb1 \
\
\
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  main()\cb1 \
\cb59 \{\cb1 \
\cb59     \cf58 int\cf52  i;\cb1 \
\cb59     \cf58 char\cf52  b[\cf61 8\cf52 ] = \cf60 "Hi there"\cf52 ;\cb1 \
\cb59     \cf58 char\cf52  a[\cf61 5\cf52 ]= \cf60 "abcde"\cf52 ;\cb1 \
\cb59     ft_strlcpy(b,a,\cf61 8\cf52 );\cb1 \
\cb59   \cf62 // ft_strncpy(a,b,4);\cf52 \cb1 \
\cb59     \cf58 for\cf52  (i=\cf61 0\cf52 ;i<\cf61 8\cf52 ;i++)\{\cb1 \
\cb59       write(\cf61 1\cf52 ,b+i,\cf61 1\cf52 );\cb1 \
\cb59     \}\cb1 \
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf6 \
\
\pard\pardeftab720\partightenfactor0
\cf14 EX11 ft_putstr_non_printable\
\pard\pardeftab720\partightenfactor0
\cf6 \
Create a function that displays a string of characters onscreen. If this string contains characters that aren\'92t printable, they\'92ll have to be displayed in the shape of hexadecimals (lowercase), preceeded by a "backslash\'94.\
\pard\pardeftab720\partightenfactor0
\cf37 \cb3 \
Notes:\
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb5 //to turn hexadecimal number of 2 digits from decimal one:\
//we use the 16 base \'930123456789abcdef\'94 in this case since we want it lowercase, the first digit will be the quotient of 16 and the number in the 16base and the 2nd will be the reminder\
//we can compare *array to ascii \
//always use ' ' not "" for functions that take char as arg\
// the non printable are *str <= 31 || *str >= 127, 127 stands for delete.\
\pard\pardeftab720\partightenfactor0
\cf37 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf37 #include <stdio.h>\
#include <unistd.h>\
\
void    ft_putchar(char c)\
\{\
    write(1, &c, 1);\
\}\
\
\
void ft_putstr_non_printable(char *str)\{\
\
    while(*str)\{\
        if ( *str <= 31 || *str >= 127)   \{\
            ft_putchar('\\\\');\
            ft_putchar("0123456789abcdef"[*str/16]);\
            ft_putchar("0123456789abcdef"[*str%16]);\
        \}\
        else ft_putchar(*str);  \
\
        str++;\
    \}\
\}\
\
\
\
\
int main()\
\{\
    char tab[100] = "Coucou\\ntu vas bien";\
    ft_putstr_non_printable(tab);\
\}\
\cf14 \cb5 \
\
\cb12 EX12 \cb1 ft_print_memory\cf6 \
\cb5 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb1 Create a function that displays the memory area onscreen. \
\'95 The display of this memory area should be split into three "columns" separated by a space : \
\uc0\u9702  The hexadecimal address of the first line\'92s first character followed by a \'92:\'92. \
\uc0\u9702  The content in hexadecimal with a space each 2 characters and should be padded with spaces if needed (see the example below). \
\uc0\u9702  The content in printable characters. \
\'95 If a character is non-printable, it\'92ll be replaced by a dot. \
\'95 Each line should handle sixteen characters. \
\'95 If size equals to 0, nothing should be displayed.\cb5 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf52 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf37 \cb3 Note:\
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb5 //pointers to memory location should be of type "void * by default.\
//https://www.educative.io/answers/what-is-a-buffer-in-c  buffer and to clear it\
//return the address of pointer using write without %p or print:\
https://stackoverflow.com/questions/48066271/how-to-print-a-pointer-address-without-printf\
//understand the bytes with the bitwise expression:\
https://medium.com/android-news/java-when-to-use-n-8-0xff-and-when-to-use-byte-n-8-2efd82ae7dd7\
//the use of the code between int j = in above in medium website\
//unsigned char is a character datatype where the variable consumes all the 8 bits of the memory and there is no sign bit (which is there in signed char). So it means that the range of unsigned char data type ranges from 0 to 255.\
//check https://www.geeksforgeeks.org/unsigned-char-in-c-with-examples/#:~:text=unsigned%20char%20is%20a%20character,ranges%20from%200%20to%20255.\
// we use unsigned char in the ft_hex, because we are dealing with binary data Use char when you are dealing with ascii characters.\
//Use unsigned char when you are dealing with binary data (say, the contents of a binary file or raster image).\
\pard\pardeftab720\partightenfactor0
\cf37 \cb3 \
#include <stdio.h>\
#include <unistd.h>\
\
void    ft_putchar(char c)\
\{\
    write(1, &c, 1);\
\}\
\
void ft_hex(unsigned char c) \{\
    char *base;\
    base = "0123456789abcdef";\
    ft_putchar(base[c / 16]);\
    ft_putchar(base[c % 16]);\
\
\}\
void ft_print_data(char *s, unsigned int size)\{\
    unsigned int i;\
    i = -1;\
    while (++i < size) \{\
        if (!(i%2))\
            ft_putchar(' ');\
        ft_hex(s[i]);\
    \}\
    while (i < 16)\
        write(1,"   ",(i++ % 2) ? 2 : 3);\
    ft_putchar(' ');\
    i = -1;\
    while(++i < size)\
        ft_putchar((s[i] < ' ' || s[i] == 127) ? '.' : s[i]);\
\
    \}\
\
void    *ft_print_memory(void *addr, unsigned int size)\
\{\
    unsigned int    i=0;\
   \
    while(i < size) \{\
         int j = 56;\
         while ((j -= 8) >= 0)\
            ft_hex((unsigned long int)(addr + i) >> j & 0xff);\
        ft_putchar(':');\
        ft_print_data(addr + i, (size-i < 16) ? size -i :16);\
        ft_putchar('\\n');\
        i += 16;\
    \}\
    return addr;\
\
\}\
\
\
\
int  main()\{\
   void *addr = "qwerf  tyuioplkmnjhhffr jlkuilosdkjjskldlkdsklsdlkdkkdskkldskldkdskldskmn     joaihuwipjed bedwwd   iowiejdn jsdddd";\
   ft_print_memory(addr, 200);\
\
\}\
\
\
\pard\pardeftab720\qc\partightenfactor0

\fs36 \cf36 ##C03\
\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf36 EX00 ft_strcmp\
\
\pard\pardeftab720\partightenfactor0
\cf6 https://www.geeksforgeeks.org/strcmp-in-c-cpp/\
\pard\pardeftab720\partightenfactor0

\fs36 \cf36 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf37 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cf58 \cb59 #include \cf60 <unistd.h>\cf52 \cb1 \
\
\cf58 \cb59 int\cf52  ft_strcmp(\cf58 char\cf52  *s1, \cf58 char\cf52  *s2)\{\cb1 \
\cb59     \cf58 int\cf52  i = \cf61 0\cf52 ;\cb1 \
\cb59     \cb1 \
\cb59     \cf58 while\cf52 ((s1[i]-  s2[i]) == \cf61 0\cf52  && s1[i] != \cf60 '\\0'\cf52 )\cb1 \
\cb59        i++;       \cb1 \
\cb59     \cf58 return\cf52  s1[i] - s2[i];\cb1 \
\
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  main()\{\cb1 \
\cb59     \cf58 char\cf52  s1[\cf61 20\cf52 ] =\cf60 "abc"\cf52 ;\cb1 \
\cb59     \cf58 char\cf52  s2[\cf61 20\cf52 ] = \cf60 "abc"\cf52 ;\cb1 \
\cb59     printf(\cf60 "%d"\cf52 ,ft_strcmp(s1,s2));\cb1 \
\
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf14 \cb5 \
EX01 ft_strncmp\cf37 \cb3 \
\cf6 \
https://www.geeksforgeeks.org/stdstrncmp-in-c/\
\pard\pardeftab720\partightenfactor0
\cf37 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb5 //we do until n-2, because the last assignment is n-1, since we increment i\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \
\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cf58 \cb59 #include \cf60 <unistd.h>\cf52 \cb1 \
\
\
\cf58 \cb59 int\cf52  ft_strcmp(\cf58 char\cf52  *s1, \cf58 char\cf52  *s2, \cf58 unsigned\cf52  \cf58 int\cf52  n)\{\cb1 \
\cb59     \cf58 int\cf52  i = \cf61 0\cf52 ;\cb1 \
\cb59     \cb1 \
\cb59     \cf58 while\cf52 (((s1[i] -  s2[i]) == \cf61 0\cf52 ) && s1[i] && i < n-\cf61 1\cf52 ) \cb1 \
\cb59        ++i;\cb1 \
\cb59     \cb1 \
\cb59     \cf58 return\cf52  s1[i] - s2[i];\cb1 \
\
\cb59 \}\cb1 \
\
\
\cf58 \cb59 int\cf52  main()\{\cb1 \
\cb59     \cf58 char\cf52  s1[\cf61 20\cf52 ] =\cf60 "abc"\cf52 ;\cb1 \
\cb59     \cf58 char\cf52  s2[\cf61 20\cf52 ] = \cf60 "abcrjkdl"\cf52 ;\cb1 \
\cb59     printf(\cf60 "%d"\cf52 ,ft_strcmp(s1,s2,\cf61 3\cf52 ));\cb1 \
\
\cb59 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf37 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf14 \cb5 EX02 ft_strcat\
\
\pard\pardeftab720\partightenfactor0
\cf8 https://www.programiz.com/c-programming/library-function/string.h/strcat\cf6 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf14 \cb5 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cf58 \cb59 #include \cf60 <unistd.h>\cf52 \cb1 \
\
\cf58 \cb59 char\cf52  *ft_strcat(\cf58 char\cf52  *dest, \cf58 char\cf52  *src )\{\cb1 \
\cb59     \cf58 int\cf52  i = \cf61 0\cf52 ;\cb1 \
\cb59     \cf58 int\cf52  j = -\cf61 1\cf52 ;\cb1 \
\cb59     \cf58 while\cf52 (dest[i])\cb1 \
\cb59       i++;\cb1 \
\cb59     \cf58 while\cf52 (src[++j])\cb1 \
\cb59       dest[i+j] = src[j];\cb1 \
\
\cb59     dest[i+j] =\cf60 '\\0'\cf52 ;\cb1 \
\cb59     \cf58 return\cf52  dest;\cb1 \
\cb59 \}\cb1 \
\
\
\cf58 \cb59 int\cf52  main()\{\cb1 \
\cb59     \cf58 char\cf52  dest[\cf61 20\cf52 ] =\cf60 "abcq"\cf52 ;\cb1 \
\cb59     \cf58 char\cf52  src[\cf61 20\cf52 ] = \cf60 " hellofggg"\cf52 ;\cb1 \
\
\cb59     ft_strcat(dest,src);\cb1 \
\cb59     \cf58 for\cf52  (\cf58 int\cf52  i=\cf61 0\cf52 ; i<\cf61 20\cf52 ; i++)\cb1 \
\cb59       printf(\cf60 "%c"\cf52 ,dest[i]);\cb1 \
\
\cb59 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf37 \cb3 \
\pard\pardeftab720\partightenfactor0
\cf14 \cb5 EX03 ft_strncat\cf37 \cb3 \
\
\pard\pardeftab720\partightenfactor0
\cf70 \
//pay atttention to the end of array the '\\0'\
\
\pard\pardeftab720\partightenfactor0
\cf37 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cf58 \cb59 #include \cf60 <unistd.h>\cf52 \cb1 \
\
\
\cf58 \cb59 char\cf52  *ft_strncat(\cf58 char\cf52  *dest, \cf58 char\cf52  *src, \cf58 unsigned\cf52  \cf58 int\cf52  nb )\{\cb1 \
\cb59     \cf58 int\cf52  i = \cf61 0\cf52 ;\cb1 \
\cb59     \cf58 int\cf52  j = -\cf61 1\cf52 ;\cb1 \
\cb59     \cf58 while\cf52 (dest[i])\cb1 \
\cb59       i++;\cb1 \
\cb59     \cf58 while\cf52 (src[++j] && j < nb)\cb1 \
\cb59       dest[i+j] = src[j];\cb1 \
\
\cb59     dest[i+j] =\cf60 '\\0'\cf52 ;\cb1 \
\cb59     \cf58 return\cf52  dest;\cb1 \
\cb59 \}\cb1 \
\
\
\cf58 \cb59 int\cf52  main()\{\cb1 \
\cb59     \cf58 char\cf52  dest[\cf61 20\cf52 ] =\cf60 "abcq"\cf52 ;\cb1 \
\cb59     \cf58 char\cf52  src[\cf61 20\cf52 ] = \cf60 "hellofggg"\cf52 ;\cb1 \
\
\cb59     ft_strncat(dest,src, \cf61 3\cf52 );\cb1 \
\cb59     \cf58 for\cf52  (\cf58 int\cf52  i=\cf61 0\cf52 ; i<\cf61 20\cf52 ; i++)\cb1 \
\cb59       printf(\cf60 "%c"\cf52 ,dest[i]);\cb1 \
\
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf37 \cb3 \
\
\pard\pardeftab720\partightenfactor0
\cf14 \cb5 EX04 ft_strstr\
\
https://www.geeksforgeeks.org/strstr-in-ccpp/ \
\
1st method using ft_strcmp, to check if all patterns are the same.\
\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 #include \cf60 <stdio.h>\cf52 \cb1 \
\cf58 \cb59 #include \cf60 <unistd.h>\cf52 \cb1 \
\
\cf58 \cb59 int\cf52  str_len(\cf58 char\cf52  *c)\{\cb1 \
\cb59     \cf58 int\cf52  n = \cf61 0\cf52 ;\cb1 \
\cb59     \cf58 while\cf52  (c[n])\cb1 \
\cb59      n++;\cb1 \
\cb59     \cf58 return\cf52  n;\cb1 \
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  ft_strcmp(\cf58 char\cf52  *s1, \cf58 char\cf52  *s2, \cf58 unsigned\cf52  \cf58 int\cf52  n)\{\cb1 \
\cb59     \cf58 int\cf52  i = \cf61 0\cf52 ;\cb1 \
\cb59     \cb1 \
\cb59     \cf58 while\cf52 (((s1[i] -  s2[i]) == \cf61 0\cf52 ) && s1[i] && i < n-\cf61 1\cf52 ) \cb1 \
\cb59        ++i;\cb1 \
\cb59     \cb1 \
\cb59     \cf58 return\cf52  s1[i] - s2[i];\cb1 \
\
\cb59 \}\cb1 \
\cf58 \cb59 char\cf52  *ft_strstr(\cf58 char\cf52  *src, \cf58 char\cf52  *to_find)\{\cb1 \
\
\cb59     \cf58 if\cf52  (!(*to_find)) \cf58 return\cf52  src;\cb1 \
\
\cb59     \cf58 int\cf52  len = str_len(to_find);\cb1 \
\
\cb59     \cf58 int\cf52  i = \cf61 0\cf52 ;\cb1 \
\cb59     \cf58 int\cf52  j;\cb1 \
\cb59     \cf58 while\cf52 (src[i]) \{\cb1 \
\cb59         \cf58 if\cf52  ((ft_strcmp(to_find,&src[i],len)) == \cf61 0\cf52 )\cb1 \
\cb59             \cf58 return\cf52  &src[i];\cb1 \
\cb59         \cf58 else\cf52  i++;\cb1 \
\cb59     \}\cb1 \
\cb59     \cf58 return\cf52  \cf60 "0"\cf52 ;\cb1 \
\cb59 \}\cb1 \
\
\cf58 \cb59 int\cf52  main()\{\cb1 \
\cb59     \cf58 char\cf52  dest[\cf61 20\cf52 ] = \cf60 "Geeksforfgeeeks"\cf52 ;\cb1 \
\cb59     \cf58 char\cf52  src[\cf61 20\cf52 ] = \cf60 "fge"\cf52 ;\cb1 \
\
\cb59     \cf58 char\cf52  *p = ft_strstr(dest,src);\cb1 \
\cb59     \cf58 for\cf52  (\cf58 int\cf52  i=\cf61 0\cf52 ; i<\cf61 20\cf52 ; i++)\cb1 \
\cb59       printf(\cf60 "%c"\cf52 ,p[i]);\cb1 \
\
\cb59 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf37 \cb3 2nd method:\
\
\pard\pardeftab720\partightenfactor0

\fs30 \cf58 \cb59 char\cf52     *ft_strstr(\cf58 char\cf52  *str, \cf58 char\cf52  *to_find)\cb1 \
\cb59 \{\cb1 \
\cb59     \cf58 int\cf52  i;\cb1 \
\
\cb59     \cf58 if\cf52  (!*to_find)\cb1 \
\cb59         \cf58 return\cf52  (str);\cb1 \
\cb59     \cf58 while\cf52  (*str)\cb1 \
\cb59     \{\cb1 \
\cb59         \cf58 if\cf52  (*str == *to_find)\cb1 \
\cb59         \{\cb1 \
\cb59             i = \cf61 1\cf52 ;\cb1 \
\cb59             \cf58 while\cf52  (to_find[i] && str[i] == to_find[i])\cb1 \
\cb59                 i++;\cb1 \
\cb59             \cf58 if\cf52  (!to_find[i])\cb1 \
\cb59                 \cf58 return\cf52  (str);\cb1 \
\cb59         \}\cb1 \
\cb59         str++;\cb1 \
\cb59     \}\cb1 \
\cb59     \cf58 return\cf52  (\cf61 0\cf52 );\cb1 \
\cb59 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf37 \cb3 \
\
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf14 EX05 ft_strlcat.c \cf6 \
\
\pard\pardeftab720\partightenfactor0

\fs30 \cf71 \cb72 \outl0\strokewidth0 \strokec71 int\cf73 \strokec73  ft_strlen(\cf71 \strokec71 char\cf73 \strokec73  *str)\cb1 \
\cb72 \{\cb1 \
\cb72     \cf71 \strokec71 int\cf73 \strokec73  n = \cf74 \strokec74 0\cf73 \strokec73 ;\cb1 \
\cb72     \cf71 \strokec71 while\cf73 \strokec73  (str[n])\cb1 \
\cb72         n++;\cb1 \
\cb72     \cf71 \strokec71 return\cf73 \strokec73  n;\cb1 \
\
\cb72 \}\cb1 \
\
\cf71 \cb72 \strokec71 unsigned\cf73 \strokec73  \cf71 \strokec71 int\cf73 \strokec73  ft_strlcat(\cf71 \strokec71 char\cf73 \strokec73  *dest, \cf71 \strokec71 char\cf73 \strokec73  *src, \cf71 \strokec71 unsigned\cf73 \strokec73  \cf71 \strokec71 int\cf73 \strokec73  size) \{\cb1 \
\
\cb72     \cf71 \strokec71 unsigned\cf73 \strokec73  \cf71 \strokec71 int\cf73 \strokec73  len_dest = ft_strlen(dest);\cb1 \
\cb72     \cf71 \strokec71 unsigned\cf73 \strokec73  \cf71 \strokec71 int\cf73 \strokec73  len_src = ft_strlen(src);\cb1 \
\cb72     \cf71 \strokec71 unsigned\cf73 \strokec73  \cf71 \strokec71 int\cf73 \strokec73  rest;\cb1 \
\
\cb72     \cf71 \strokec71 if\cf73 \strokec73  (size > len_dest)\cb1 \
\cb72         rest = len_dest + len_src;\cb1 \
\cb72     \cf71 \strokec71 else\cf73 \strokec73  rest = size + len_src;\cb1 \
\
\cb72     \cf71 \strokec71 while\cf73 \strokec73 (*src && len_dest + \cf74 \strokec74 1\cf73 \strokec73  < size)\{\cb1 \
\cb72         dest[len_dest] = (*src)++;\cb1 \
\cb72         len_dest++;\cb1 \
\
\cb72     \}\cb1 \
\cb72     dest[len_dest] = \cf75 \strokec75 '\\0'\cf73 \strokec73 ;\cb1 \
\cb72     \cf71 \strokec71 return\cf73 \strokec73  rest;\cb1 \
\
\cb72 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf6 \outl0\strokewidth0 \
\
\pard\pardeftab720\qc\partightenfactor0

\fs36 \cf14 ##C04
\fs28 \cf6 \
\pard\pardeftab720\partightenfactor0
\cf6 \
\cf14 EX00 ft_strlen.c\cf6 \
\
\pard\pardeftab720\partightenfactor0

\fs30 \cf71 \cb72 \outl0\strokewidth0 \strokec71 int\cf73 \strokec73  ft_strlen(\cf71 \strokec71 char\cf73 \strokec73  *c)\{\cb1 \
\cb72     \cf71 \strokec71 int\cf73 \strokec73  n = \cf74 \strokec74 0\cf73 \strokec73 ;\cb1 \
\cb72     \cf71 \strokec71 while\cf73 \strokec73  (*c) \{ \cb1 \
\cb72         (++c);\cb1 \
\cb72     n++;\cb1 \
\cb72 \}\cb1 \
\cb72     \cf71 \strokec71 return\cf73 \strokec73  n;\cb1 \
\cb72 \}\cb1 \
\cf71 \cb72 \strokec71 int\cf73 \strokec73  main()\{\cb1 \
\
\cb72     \cf71 \strokec71 char\cf73 \strokec73  str\cf71 \strokec71 []\cf73 \strokec73  = \cf75 \strokec75 "abc"\cf73 \strokec73 ;\cb1 \
\cb72     printf(\cf75 \strokec75 "%d"\cf73 \strokec73 ,ft_strlen(str));\cb1 \
\cb72 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf6 \outl0\strokewidth0 \
Remember to use c++ instead of *c++ 
\f8\fs26 \cf0 \outl0\strokewidth0 \strokec6 *(
\f1\fs28 c + 1) \cf6 \outl0\strokewidth0 to increment the array. Since doing the first option will increment the address instead of the stored value.\
\
\cf25 Or we use *(c++)\cf6 , the important is to tell the compiler that we are incrementing the area itself not the pointer.\
\
\
\
\cf14 EX01 ft_putstr.c\cf6 \
\
\pard\pardeftab720\partightenfactor0

\fs30 \cf71 \cb72 \outl0\strokewidth0 \strokec71 #include \cf75 \strokec75 <unistd.h>\cf73 \cb1 \strokec73 \
\cf71 \cb72 \strokec71 #include \cf75 \strokec75 <stdio.h>\cf73 \cb1 \strokec73 \
\
\
\cf71 \cb72 \strokec71 void\cf73 \strokec73   ft_putchar(\cf71 \strokec71 char\cf73 \strokec73  c)\{\cb1 \
\cb72     write(\cf74 \strokec74 1\cf73 \strokec73 ,&c,\cf74 \strokec74 1\cf73 \strokec73 );\cb1 \
\cb72 \}\cb1 \
\
\cf71 \cb72 \strokec71 void\cf73 \strokec73  ft_putstr(\cf71 \strokec71 char\cf73 \strokec73  *str)\{\cb1 \
\
\cb72     \cf71 \strokec71 while\cf73 \strokec73 (*str)\cb1 \
\cb72      ft_putchar(*(str++));\cb1 \
\cb72 \}\cb1 \
\
\cf71 \cb72 \strokec71 int\cf73 \strokec73  main()\{\cb1 \
\
\cb72     \cf71 \strokec71 char\cf73 \strokec73  str\cf71 \strokec71 []\cf73 \strokec73  = \cf75 \strokec75 "abfdfgh1234123455c"\cf73 \strokec73 ;\cb1 \
\cb72     ft_putstr(str);\cb1 \
\cb72 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf6 \outl0\strokewidth0 \
\
\cf25 \
2nd method using len of the str:\
\cf6 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf71 \cb72 \outl0\strokewidth0 \strokec71 #include \cf75 \strokec75 <unistd.h>\cf73 \cb1 \strokec73 \
\cf71 \cb72 \strokec71 #include \cf75 \strokec75 <stdio.h>\cf73 \cb1 \strokec73 \
\
\
\cf71 \cb72 \strokec71 int\cf73 \strokec73      ft_strlen(\cf71 \strokec71 char\cf73 \strokec73  *str)\cb1 \
\cb72 \{\cb1 \
\cb72     \cf71 \strokec71 int\cf73 \strokec73  n;\cb1 \
\
\cb72     n = \cf74 \strokec74 0\cf73 \strokec73 ;\cb1 \
\cb72     \cf71 \strokec71 while\cf73 \strokec73  (str[n])\cb1 \
\cb72         n++;\cb1 \
\cb72     \cf71 \strokec71 return\cf73 \strokec73  (n);\cb1 \
\cb72 \}\cb1 \
\
\cf71 \cb72 \strokec71 void\cf73 \strokec73     ft_putstr(\cf71 \strokec71 char\cf73 \strokec73  *str)\cb1 \
\cb72 \{\cb1 \
\cb72     write(\cf74 \strokec74 1\cf73 \strokec73 , str, ft_strlen(str));\cb1 \
\cb72 \}\cb1 \
\
\cf71 \cb72 \strokec71 int\cf73 \strokec73  main()\{\cb1 \
\
\cb72     \cf71 \strokec71 char\cf73 \strokec73  str\cf71 \strokec71 []\cf73 \strokec73  = \cf75 \strokec75 "abfdfgh1234123455c"\cf73 \strokec73 ;\cb1 \
\cb72     ft_putstr(str);\cb1 \
\cb72 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf6 \outl0\strokewidth0 \
\
\
}